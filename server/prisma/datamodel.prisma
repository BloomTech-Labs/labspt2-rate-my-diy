# These type-definitions allow the prisma client to speak to the DB 
# according to the types defined in schema.graphql.
# They also allow prisma to generate crud operations for us.


type User {
  id: ID! @unique
  url: String
  username: String! @unique
  password: String! 
  email: String! @unique
  userProfileImage: String! @default(value: "http://i.pravatar.cc/300")
  bio: String! @default(value: "Hi, this is my page where I share projects and reviews")
  privilege: String! @default(value: "Plebian")
  stripeId: String
  accountType: String! @default(value: "free-tier")
  ReviewList: [Review!] @relation(name: "UserReviews" onDelete: CASCADE)
  LikedReviews: [Review!] @relation(name: "UserLikedReviews" onDelete: CASCADE)
  DislikedReviews: [Review!] @relation(name: "UserDislikedReviews" onDelete: CASCADE)
  Projects: [Project!] @relation(name: "UserProjects" onDelete: CASCADE)
  RatedProjects: [Project!] @relation(name: "UserRatedProjects" onDelete: CASCADE)
}

type Project {
 id: ID! @unique
 name: String!
 category: String!
 timestamp: DateTime!
 titleImg: String! @default(value: "http://lorempixel.com/400/400/")
 titleBlurb: String! @default(value: "I hope you like my project")
 rating: Float! @default(value: 0)
 steps: String! @default(value: "1. Put the lime in the coconut 2. Drink them both up 3. Call the doctor 4. Ask if there's anything you can take to relieve your bellyache")
 User: User! @relation(name: "UserProjects")
 Reviews:[Review!] @relation(name: "ProjectReviews" onDelete: CASCADE)
 RatedBy: [User!] @relation(name: "UserRatedProjects")
}
  
type Review {
  id: ID! @unique 
  title: String!
  text: String!
  editedAt: DateTime!
  rating: Float! @default(value: 0)
  thumbsUp: Int! @default(value: 0)
  LikedBy: [User!] @relation(name: "UserLikedReviews")
  thumbsDown: Int! @fefault(value: 0)
  DislikedBy: [User!] @relation(name: "UserDislikedReviews")
  Author: User! @relation(name: "UserReviews")
  ProjectReviewed: Project! @relation(name: "ProjectReviews")
}