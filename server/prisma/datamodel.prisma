# These type-definitions allow the prisma client to speak to the DB 
# according to the types defined in schema.graphql.
# They also allow prisma to generate crud operations for us.

type Query {
  getUsers: [User!]!
  getUserById: User!
  getProjects: [Project!]!
  getProjectByUser: [Project]!
  getProjectById: Project!
  getReviews: [Review!]!
  getReviewById: Review!
}
#Types needed:  Users, Projects, Reviews, Comments

type Stars {
 number: Float! @default(value: 1)
}

type Privileges {
 isModerator: Boolean!
 isAdmin: Boolean!
 isPlebian: Boolean!
}

type Mutation {
  createUser(id: ID!, username: String!, password: String!, email: String!): User!
}

type User {
  id: ID! @unique
  makerRating: Float
  ReviewerThumbs: Int! @default(value: 1)
  url: String!
  username: String! @unique
  password: String! @unique
  email: String! @unique
  Projects: [Project!]!
  ReviewList: [Review!]!
  Bio: Bio
  Billing: [Billing!]!
  Projects: [Project!]!
  Privileges: [Privilege!]!
}
  
type StepArray {
  textBlurbs: String
  imgUrls: String
}

type Project {
 id: ID! 
 name: String!
 category: String!
 timestamp: String!
 EditedAt: String!
 titleImg: String!
 titleBlurb: String!
 Stars: Stars
 Author: User!
 Steps: [StepArray!]!
 Reviews:[Review!]!
}
  
type Review {
  id: ID! 
  title: String!
  text: String!
  editedAt: String!
  reviewThumbsUp: Int
  reviewThumbsDown: Int
  Comments: [Comment]
  Author: User!
  Stars: Stars
}

type Comment {
  id: ID!
  editedAt: DateTime!
  text: String!
  User: User!
}

type Privilege{
  id: ID!
  name: String!
}

type Billing {
  amtPaid: Float
  DatePaid: String
  OrderNumber: Int
  Description: String
}



