# This needs work returning error
type Query {
type Query {
  getUsers: [User!]!
  getUserById: User!
  getProjects: [Project!]!
  getProjectByUser: [Project]!
  getProjectById: Project!
  info: getReviews: [Review!]!
  getReviewById: Review!
  getStars: [Star!]!
  getPrivileges: [Privilege!]!
  getBios: [Bio!]!
  getBioById: Bio!
  getComments: [Comment!]!
  getModerators: [Moderator!]!
  getAdmins: [Admin!]!

}
 
type Mutation {
  createUser(id: ID!
}


type Stars {
  number: Float!


}

type Privilege {
  isModerator:Boolean!
  isAdmin:Boolean!
  isPlebian:Boolean!
}

type User {
 id: ID!
 projects: [Project!]!
 privileges: [Privilege!]!
 makerRating: Float# @unique
 reviewerThumbs: INT! @defaultValue(â€˜1)
 reviews: [Review!]!
 bio: Bio
 billing: Billing
 url: String!
 username: String! # @unique
 p
  assword: String  email: String! 

  }

type Bio {
  id: ID!
  user: User!
  age: INT
  about: String
  location: String
}
  
type StepArray {[
  textBlurbs: String
  imgUr ls: String
] 
}
type Project {
 id: ID!
 name: String!
 category: String!
 stars: Stars
 timestamp: String!
 EditedAt: String!
 author: User!
 titleImg: String!
 titleBlurb: String!
 Steps:StepArray
 Reviews:[Review]
}
  
type Review {
  id: ID!
  Title: String!
  author: User!
  stars: Stars
  text: String!
  editedAt: String!
  reviewThumbsUp: INT
  reviewThumbsDown: INT
  comments: [Comment]
}

type Comment {
  id: ID!
  editedAt: DateTime!
  text: String!
  user: User!
}


  name: String!
}

type Billing{
amtPaid:Float
DatePaid:String
OrderNumber:INT
Description:String
}

type Moderators{
  id: ID!
  user: [User!]
  isModerator: Boolean
}

type Admin{
  id: ID!
  user: [User!]
  isAdmin: Boolean
}