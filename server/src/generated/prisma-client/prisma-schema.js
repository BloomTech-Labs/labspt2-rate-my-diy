module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBilling {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregatePrivilege {
  count: Int!
}

type AggregatePrivileges {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateStars {
  count: Int!
}

type AggregateStepArray {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Billing {
  amtPaid: Float
  DatePaid: String
  OrderNumber: Int
  Description: String
}

type BillingConnection {
  pageInfo: PageInfo!
  edges: [BillingEdge]!
  aggregate: AggregateBilling!
}

input BillingCreateInput {
  amtPaid: Float
  DatePaid: String
  OrderNumber: Int
  Description: String
}

input BillingCreateManyInput {
  create: [BillingCreateInput!]
}

type BillingEdge {
  node: Billing!
  cursor: String!
}

enum BillingOrderByInput {
  amtPaid_ASC
  amtPaid_DESC
  DatePaid_ASC
  DatePaid_DESC
  OrderNumber_ASC
  OrderNumber_DESC
  Description_ASC
  Description_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BillingPreviousValues {
  amtPaid: Float
  DatePaid: String
  OrderNumber: Int
  Description: String
}

input BillingScalarWhereInput {
  amtPaid: Float
  amtPaid_not: Float
  amtPaid_in: [Float!]
  amtPaid_not_in: [Float!]
  amtPaid_lt: Float
  amtPaid_lte: Float
  amtPaid_gt: Float
  amtPaid_gte: Float
  DatePaid: String
  DatePaid_not: String
  DatePaid_in: [String!]
  DatePaid_not_in: [String!]
  DatePaid_lt: String
  DatePaid_lte: String
  DatePaid_gt: String
  DatePaid_gte: String
  DatePaid_contains: String
  DatePaid_not_contains: String
  DatePaid_starts_with: String
  DatePaid_not_starts_with: String
  DatePaid_ends_with: String
  DatePaid_not_ends_with: String
  OrderNumber: Int
  OrderNumber_not: Int
  OrderNumber_in: [Int!]
  OrderNumber_not_in: [Int!]
  OrderNumber_lt: Int
  OrderNumber_lte: Int
  OrderNumber_gt: Int
  OrderNumber_gte: Int
  Description: String
  Description_not: String
  Description_in: [String!]
  Description_not_in: [String!]
  Description_lt: String
  Description_lte: String
  Description_gt: String
  Description_gte: String
  Description_contains: String
  Description_not_contains: String
  Description_starts_with: String
  Description_not_starts_with: String
  Description_ends_with: String
  Description_not_ends_with: String
  AND: [BillingScalarWhereInput!]
  OR: [BillingScalarWhereInput!]
  NOT: [BillingScalarWhereInput!]
}

type BillingSubscriptionPayload {
  mutation: MutationType!
  node: Billing
  updatedFields: [String!]
  previousValues: BillingPreviousValues
}

input BillingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BillingWhereInput
  AND: [BillingSubscriptionWhereInput!]
  OR: [BillingSubscriptionWhereInput!]
  NOT: [BillingSubscriptionWhereInput!]
}

input BillingUpdateManyDataInput {
  amtPaid: Float
  DatePaid: String
  OrderNumber: Int
  Description: String
}

input BillingUpdateManyInput {
  create: [BillingCreateInput!]
  deleteMany: [BillingScalarWhereInput!]
  updateMany: [BillingUpdateManyWithWhereNestedInput!]
}

input BillingUpdateManyMutationInput {
  amtPaid: Float
  DatePaid: String
  OrderNumber: Int
  Description: String
}

input BillingUpdateManyWithWhereNestedInput {
  where: BillingScalarWhereInput!
  data: BillingUpdateManyDataInput!
}

input BillingWhereInput {
  amtPaid: Float
  amtPaid_not: Float
  amtPaid_in: [Float!]
  amtPaid_not_in: [Float!]
  amtPaid_lt: Float
  amtPaid_lte: Float
  amtPaid_gt: Float
  amtPaid_gte: Float
  DatePaid: String
  DatePaid_not: String
  DatePaid_in: [String!]
  DatePaid_not_in: [String!]
  DatePaid_lt: String
  DatePaid_lte: String
  DatePaid_gt: String
  DatePaid_gte: String
  DatePaid_contains: String
  DatePaid_not_contains: String
  DatePaid_starts_with: String
  DatePaid_not_starts_with: String
  DatePaid_ends_with: String
  DatePaid_not_ends_with: String
  OrderNumber: Int
  OrderNumber_not: Int
  OrderNumber_in: [Int!]
  OrderNumber_not_in: [Int!]
  OrderNumber_lt: Int
  OrderNumber_lte: Int
  OrderNumber_gt: Int
  OrderNumber_gte: Int
  Description: String
  Description_not: String
  Description_in: [String!]
  Description_not_in: [String!]
  Description_lt: String
  Description_lte: String
  Description_gt: String
  Description_gte: String
  Description_contains: String
  Description_not_contains: String
  Description_starts_with: String
  Description_not_starts_with: String
  Description_ends_with: String
  Description_not_ends_with: String
  AND: [BillingWhereInput!]
  OR: [BillingWhereInput!]
  NOT: [BillingWhereInput!]
}

type Comment {
  id: ID!
  editedAt: DateTime!
  text: String!
  User: User!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  editedAt: DateTime!
  text: String!
  User: UserCreateOneInput!
}

input CommentCreateManyInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  editedAt_ASC
  editedAt_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: ID!
  editedAt: DateTime!
  text: String!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  editedAt: DateTime
  editedAt_not: DateTime
  editedAt_in: [DateTime!]
  editedAt_not_in: [DateTime!]
  editedAt_lt: DateTime
  editedAt_lte: DateTime
  editedAt_gt: DateTime
  editedAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateDataInput {
  editedAt: DateTime
  text: String
  User: UserUpdateOneRequiredInput
}

input CommentUpdateInput {
  editedAt: DateTime
  text: String
  User: UserUpdateOneRequiredInput
}

input CommentUpdateManyDataInput {
  editedAt: DateTime
  text: String
}

input CommentUpdateManyInput {
  create: [CommentCreateInput!]
  update: [CommentUpdateWithWhereUniqueNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueNestedInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyMutationInput {
  editedAt: DateTime
  text: String
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateDataInput!
}

input CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateDataInput!
  create: CommentCreateInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  editedAt: DateTime
  editedAt_not: DateTime
  editedAt_in: [DateTime!]
  editedAt_not_in: [DateTime!]
  editedAt_lt: DateTime
  editedAt_lte: DateTime
  editedAt_gt: DateTime
  editedAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  User: UserWhereInput
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createBilling(data: BillingCreateInput!): Billing!
  updateManyBillings(data: BillingUpdateManyMutationInput!, where: BillingWhereInput): BatchPayload!
  deleteManyBillings(where: BillingWhereInput): BatchPayload!
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createPrivilege(data: PrivilegeCreateInput!): Privilege!
  updatePrivilege(data: PrivilegeUpdateInput!, where: PrivilegeWhereUniqueInput!): Privilege
  updateManyPrivileges(data: PrivilegeUpdateManyMutationInput!, where: PrivilegeWhereInput): BatchPayload!
  upsertPrivilege(where: PrivilegeWhereUniqueInput!, create: PrivilegeCreateInput!, update: PrivilegeUpdateInput!): Privilege!
  deletePrivilege(where: PrivilegeWhereUniqueInput!): Privilege
  deleteManyPrivileges(where: PrivilegeWhereInput): BatchPayload!
  createPrivileges(data: PrivilegesCreateInput!): Privileges!
  updateManyPrivilegeses(data: PrivilegesUpdateManyMutationInput!, where: PrivilegesWhereInput): BatchPayload!
  deleteManyPrivilegeses(where: PrivilegesWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createReview(data: ReviewCreateInput!): Review!
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  createStars(data: StarsCreateInput!): Stars!
  updateManyStarses(data: StarsUpdateManyMutationInput!, where: StarsWhereInput): BatchPayload!
  deleteManyStarses(where: StarsWhereInput): BatchPayload!
  createStepArray(data: StepArrayCreateInput!): StepArray!
  updateManyStepArrays(data: StepArrayUpdateManyMutationInput!, where: StepArrayWhereInput): BatchPayload!
  deleteManyStepArrays(where: StepArrayWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Privilege {
  id: ID!
  name: String!
}

type PrivilegeConnection {
  pageInfo: PageInfo!
  edges: [PrivilegeEdge]!
  aggregate: AggregatePrivilege!
}

input PrivilegeCreateInput {
  name: String!
}

input PrivilegeCreateManyInput {
  create: [PrivilegeCreateInput!]
  connect: [PrivilegeWhereUniqueInput!]
}

type PrivilegeEdge {
  node: Privilege!
  cursor: String!
}

enum PrivilegeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PrivilegePreviousValues {
  id: ID!
  name: String!
}

type Privileges {
  isModerator: Boolean!
  isAdmin: Boolean!
  isPlebian: Boolean!
}

input PrivilegeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [PrivilegeScalarWhereInput!]
  OR: [PrivilegeScalarWhereInput!]
  NOT: [PrivilegeScalarWhereInput!]
}

type PrivilegesConnection {
  pageInfo: PageInfo!
  edges: [PrivilegesEdge]!
  aggregate: AggregatePrivileges!
}

input PrivilegesCreateInput {
  isModerator: Boolean!
  isAdmin: Boolean!
  isPlebian: Boolean!
}

type PrivilegesEdge {
  node: Privileges!
  cursor: String!
}

enum PrivilegesOrderByInput {
  isModerator_ASC
  isModerator_DESC
  isAdmin_ASC
  isAdmin_DESC
  isPlebian_ASC
  isPlebian_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PrivilegesPreviousValues {
  isModerator: Boolean!
  isAdmin: Boolean!
  isPlebian: Boolean!
}

type PrivilegesSubscriptionPayload {
  mutation: MutationType!
  node: Privileges
  updatedFields: [String!]
  previousValues: PrivilegesPreviousValues
}

input PrivilegesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PrivilegesWhereInput
  AND: [PrivilegesSubscriptionWhereInput!]
  OR: [PrivilegesSubscriptionWhereInput!]
  NOT: [PrivilegesSubscriptionWhereInput!]
}

type PrivilegeSubscriptionPayload {
  mutation: MutationType!
  node: Privilege
  updatedFields: [String!]
  previousValues: PrivilegePreviousValues
}

input PrivilegeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PrivilegeWhereInput
  AND: [PrivilegeSubscriptionWhereInput!]
  OR: [PrivilegeSubscriptionWhereInput!]
  NOT: [PrivilegeSubscriptionWhereInput!]
}

input PrivilegesUpdateManyMutationInput {
  isModerator: Boolean
  isAdmin: Boolean
  isPlebian: Boolean
}

input PrivilegesWhereInput {
  isModerator: Boolean
  isModerator_not: Boolean
  isAdmin: Boolean
  isAdmin_not: Boolean
  isPlebian: Boolean
  isPlebian_not: Boolean
  AND: [PrivilegesWhereInput!]
  OR: [PrivilegesWhereInput!]
  NOT: [PrivilegesWhereInput!]
}

input PrivilegeUpdateDataInput {
  name: String
}

input PrivilegeUpdateInput {
  name: String
}

input PrivilegeUpdateManyDataInput {
  name: String
}

input PrivilegeUpdateManyInput {
  create: [PrivilegeCreateInput!]
  update: [PrivilegeUpdateWithWhereUniqueNestedInput!]
  upsert: [PrivilegeUpsertWithWhereUniqueNestedInput!]
  delete: [PrivilegeWhereUniqueInput!]
  connect: [PrivilegeWhereUniqueInput!]
  set: [PrivilegeWhereUniqueInput!]
  disconnect: [PrivilegeWhereUniqueInput!]
  deleteMany: [PrivilegeScalarWhereInput!]
  updateMany: [PrivilegeUpdateManyWithWhereNestedInput!]
}

input PrivilegeUpdateManyMutationInput {
  name: String
}

input PrivilegeUpdateManyWithWhereNestedInput {
  where: PrivilegeScalarWhereInput!
  data: PrivilegeUpdateManyDataInput!
}

input PrivilegeUpdateWithWhereUniqueNestedInput {
  where: PrivilegeWhereUniqueInput!
  data: PrivilegeUpdateDataInput!
}

input PrivilegeUpsertWithWhereUniqueNestedInput {
  where: PrivilegeWhereUniqueInput!
  update: PrivilegeUpdateDataInput!
  create: PrivilegeCreateInput!
}

input PrivilegeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [PrivilegeWhereInput!]
  OR: [PrivilegeWhereInput!]
  NOT: [PrivilegeWhereInput!]
}

input PrivilegeWhereUniqueInput {
  id: ID
}

type Project {
  id: ID!
  name: String!
  category: String!
  timestamp: DateTime!
  EditedAt: String!
  titleImg: String!
  titleBlurb: String!
  Stars: Stars
  Author: User!
  Steps(where: StepArrayWhereInput, orderBy: StepArrayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StepArray!]
  Reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  user: User!
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  name: String!
  category: String!
  timestamp: DateTime!
  EditedAt: String!
  titleImg: String!
  titleBlurb: String!
  Stars: StarsCreateOneInput
  Author: UserCreateOneInput!
  Steps: StepArrayCreateManyInput
  Reviews: ReviewCreateManyInput
  user: UserCreateOneWithoutProjectsInput!
}

input ProjectCreateManyWithoutUserInput {
  create: [ProjectCreateWithoutUserInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutUserInput {
  name: String!
  category: String!
  timestamp: DateTime!
  EditedAt: String!
  titleImg: String!
  titleBlurb: String!
  Stars: StarsCreateOneInput
  Author: UserCreateOneInput!
  Steps: StepArrayCreateManyInput
  Reviews: ReviewCreateManyInput
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  category_ASC
  category_DESC
  timestamp_ASC
  timestamp_DESC
  EditedAt_ASC
  EditedAt_DESC
  titleImg_ASC
  titleImg_DESC
  titleBlurb_ASC
  titleBlurb_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  name: String!
  category: String!
  timestamp: DateTime!
  EditedAt: String!
  titleImg: String!
  titleBlurb: String!
}

input ProjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  timestamp: DateTime
  timestamp_not: DateTime
  timestamp_in: [DateTime!]
  timestamp_not_in: [DateTime!]
  timestamp_lt: DateTime
  timestamp_lte: DateTime
  timestamp_gt: DateTime
  timestamp_gte: DateTime
  EditedAt: String
  EditedAt_not: String
  EditedAt_in: [String!]
  EditedAt_not_in: [String!]
  EditedAt_lt: String
  EditedAt_lte: String
  EditedAt_gt: String
  EditedAt_gte: String
  EditedAt_contains: String
  EditedAt_not_contains: String
  EditedAt_starts_with: String
  EditedAt_not_starts_with: String
  EditedAt_ends_with: String
  EditedAt_not_ends_with: String
  titleImg: String
  titleImg_not: String
  titleImg_in: [String!]
  titleImg_not_in: [String!]
  titleImg_lt: String
  titleImg_lte: String
  titleImg_gt: String
  titleImg_gte: String
  titleImg_contains: String
  titleImg_not_contains: String
  titleImg_starts_with: String
  titleImg_not_starts_with: String
  titleImg_ends_with: String
  titleImg_not_ends_with: String
  titleBlurb: String
  titleBlurb_not: String
  titleBlurb_in: [String!]
  titleBlurb_not_in: [String!]
  titleBlurb_lt: String
  titleBlurb_lte: String
  titleBlurb_gt: String
  titleBlurb_gte: String
  titleBlurb_contains: String
  titleBlurb_not_contains: String
  titleBlurb_starts_with: String
  titleBlurb_not_starts_with: String
  titleBlurb_ends_with: String
  titleBlurb_not_ends_with: String
  AND: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateInput {
  name: String
  category: String
  timestamp: DateTime
  EditedAt: String
  titleImg: String
  titleBlurb: String
  Stars: StarsUpdateOneInput
  Author: UserUpdateOneRequiredInput
  Steps: StepArrayUpdateManyInput
  Reviews: ReviewUpdateManyInput
  user: UserUpdateOneRequiredWithoutProjectsInput
}

input ProjectUpdateManyDataInput {
  name: String
  category: String
  timestamp: DateTime
  EditedAt: String
  titleImg: String
  titleBlurb: String
}

input ProjectUpdateManyMutationInput {
  name: String
  category: String
  timestamp: DateTime
  EditedAt: String
  titleImg: String
  titleBlurb: String
}

input ProjectUpdateManyWithoutUserInput {
  create: [ProjectCreateWithoutUserInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdateWithoutUserDataInput {
  name: String
  category: String
  timestamp: DateTime
  EditedAt: String
  titleImg: String
  titleBlurb: String
  Stars: StarsUpdateOneInput
  Author: UserUpdateOneRequiredInput
  Steps: StepArrayUpdateManyInput
  Reviews: ReviewUpdateManyInput
}

input ProjectUpdateWithWhereUniqueWithoutUserInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutUserDataInput!
}

input ProjectUpsertWithWhereUniqueWithoutUserInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutUserDataInput!
  create: ProjectCreateWithoutUserInput!
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  timestamp: DateTime
  timestamp_not: DateTime
  timestamp_in: [DateTime!]
  timestamp_not_in: [DateTime!]
  timestamp_lt: DateTime
  timestamp_lte: DateTime
  timestamp_gt: DateTime
  timestamp_gte: DateTime
  EditedAt: String
  EditedAt_not: String
  EditedAt_in: [String!]
  EditedAt_not_in: [String!]
  EditedAt_lt: String
  EditedAt_lte: String
  EditedAt_gt: String
  EditedAt_gte: String
  EditedAt_contains: String
  EditedAt_not_contains: String
  EditedAt_starts_with: String
  EditedAt_not_starts_with: String
  EditedAt_ends_with: String
  EditedAt_not_ends_with: String
  titleImg: String
  titleImg_not: String
  titleImg_in: [String!]
  titleImg_not_in: [String!]
  titleImg_lt: String
  titleImg_lte: String
  titleImg_gt: String
  titleImg_gte: String
  titleImg_contains: String
  titleImg_not_contains: String
  titleImg_starts_with: String
  titleImg_not_starts_with: String
  titleImg_ends_with: String
  titleImg_not_ends_with: String
  titleBlurb: String
  titleBlurb_not: String
  titleBlurb_in: [String!]
  titleBlurb_not_in: [String!]
  titleBlurb_lt: String
  titleBlurb_lte: String
  titleBlurb_gt: String
  titleBlurb_gte: String
  titleBlurb_contains: String
  titleBlurb_not_contains: String
  titleBlurb_starts_with: String
  titleBlurb_not_starts_with: String
  titleBlurb_ends_with: String
  titleBlurb_not_ends_with: String
  Stars: StarsWhereInput
  Author: UserWhereInput
  Steps_every: StepArrayWhereInput
  Steps_some: StepArrayWhereInput
  Steps_none: StepArrayWhereInput
  Reviews_every: ReviewWhereInput
  Reviews_some: ReviewWhereInput
  Reviews_none: ReviewWhereInput
  user: UserWhereInput
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  billings(where: BillingWhereInput, orderBy: BillingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Billing]!
  billingsConnection(where: BillingWhereInput, orderBy: BillingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BillingConnection!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  privilege(where: PrivilegeWhereUniqueInput!): Privilege
  privileges(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Privilege]!
  privilegesConnection(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PrivilegeConnection!
  privilegeses(where: PrivilegesWhereInput, orderBy: PrivilegesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Privileges]!
  privilegesesConnection(where: PrivilegesWhereInput, orderBy: PrivilegesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PrivilegesConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  starses(where: StarsWhereInput, orderBy: StarsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stars]!
  starsesConnection(where: StarsWhereInput, orderBy: StarsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StarsConnection!
  stepArrays(where: StepArrayWhereInput, orderBy: StepArrayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StepArray]!
  stepArraysConnection(where: StepArrayWhereInput, orderBy: StepArrayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StepArrayConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Review {
  id: ID!
  title: String!
  text: String!
  editedAt: String!
  reviewThumbsUp: Int
  reviewThumbsDown: Int
  Comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  Author: User!
  Stars: Stars
}

type ReviewConnection {
  pageInfo: PageInfo!
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  title: String!
  text: String!
  editedAt: String!
  reviewThumbsUp: Int
  reviewThumbsDown: Int
  Comments: CommentCreateManyInput
  Author: UserCreateOneWithoutReviewListInput!
  Stars: StarsCreateOneInput
}

input ReviewCreateManyInput {
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateManyWithoutAuthorInput {
  create: [ReviewCreateWithoutAuthorInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutAuthorInput {
  title: String!
  text: String!
  editedAt: String!
  reviewThumbsUp: Int
  reviewThumbsDown: Int
  Comments: CommentCreateManyInput
  Stars: StarsCreateOneInput
}

type ReviewEdge {
  node: Review!
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  editedAt_ASC
  editedAt_DESC
  reviewThumbsUp_ASC
  reviewThumbsUp_DESC
  reviewThumbsDown_ASC
  reviewThumbsDown_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReviewPreviousValues {
  id: ID!
  title: String!
  text: String!
  editedAt: String!
  reviewThumbsUp: Int
  reviewThumbsDown: Int
}

input ReviewScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  editedAt: String
  editedAt_not: String
  editedAt_in: [String!]
  editedAt_not_in: [String!]
  editedAt_lt: String
  editedAt_lte: String
  editedAt_gt: String
  editedAt_gte: String
  editedAt_contains: String
  editedAt_not_contains: String
  editedAt_starts_with: String
  editedAt_not_starts_with: String
  editedAt_ends_with: String
  editedAt_not_ends_with: String
  reviewThumbsUp: Int
  reviewThumbsUp_not: Int
  reviewThumbsUp_in: [Int!]
  reviewThumbsUp_not_in: [Int!]
  reviewThumbsUp_lt: Int
  reviewThumbsUp_lte: Int
  reviewThumbsUp_gt: Int
  reviewThumbsUp_gte: Int
  reviewThumbsDown: Int
  reviewThumbsDown_not: Int
  reviewThumbsDown_in: [Int!]
  reviewThumbsDown_not_in: [Int!]
  reviewThumbsDown_lt: Int
  reviewThumbsDown_lte: Int
  reviewThumbsDown_gt: Int
  reviewThumbsDown_gte: Int
  AND: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  NOT: [ReviewScalarWhereInput!]
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
  AND: [ReviewSubscriptionWhereInput!]
  OR: [ReviewSubscriptionWhereInput!]
  NOT: [ReviewSubscriptionWhereInput!]
}

input ReviewUpdateDataInput {
  title: String
  text: String
  editedAt: String
  reviewThumbsUp: Int
  reviewThumbsDown: Int
  Comments: CommentUpdateManyInput
  Author: UserUpdateOneRequiredWithoutReviewListInput
  Stars: StarsUpdateOneInput
}

input ReviewUpdateInput {
  title: String
  text: String
  editedAt: String
  reviewThumbsUp: Int
  reviewThumbsDown: Int
  Comments: CommentUpdateManyInput
  Author: UserUpdateOneRequiredWithoutReviewListInput
  Stars: StarsUpdateOneInput
}

input ReviewUpdateManyDataInput {
  title: String
  text: String
  editedAt: String
  reviewThumbsUp: Int
  reviewThumbsDown: Int
}

input ReviewUpdateManyInput {
  create: [ReviewCreateInput!]
  update: [ReviewUpdateWithWhereUniqueNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueNestedInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyMutationInput {
  title: String
  text: String
  editedAt: String
  reviewThumbsUp: Int
  reviewThumbsDown: Int
}

input ReviewUpdateManyWithoutAuthorInput {
  create: [ReviewCreateWithoutAuthorInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyDataInput!
}

input ReviewUpdateWithoutAuthorDataInput {
  title: String
  text: String
  editedAt: String
  reviewThumbsUp: Int
  reviewThumbsDown: Int
  Comments: CommentUpdateManyInput
  Stars: StarsUpdateOneInput
}

input ReviewUpdateWithWhereUniqueNestedInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateDataInput!
}

input ReviewUpdateWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutAuthorDataInput!
}

input ReviewUpsertWithWhereUniqueNestedInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateDataInput!
  create: ReviewCreateInput!
}

input ReviewUpsertWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutAuthorDataInput!
  create: ReviewCreateWithoutAuthorInput!
}

input ReviewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  editedAt: String
  editedAt_not: String
  editedAt_in: [String!]
  editedAt_not_in: [String!]
  editedAt_lt: String
  editedAt_lte: String
  editedAt_gt: String
  editedAt_gte: String
  editedAt_contains: String
  editedAt_not_contains: String
  editedAt_starts_with: String
  editedAt_not_starts_with: String
  editedAt_ends_with: String
  editedAt_not_ends_with: String
  reviewThumbsUp: Int
  reviewThumbsUp_not: Int
  reviewThumbsUp_in: [Int!]
  reviewThumbsUp_not_in: [Int!]
  reviewThumbsUp_lt: Int
  reviewThumbsUp_lte: Int
  reviewThumbsUp_gt: Int
  reviewThumbsUp_gte: Int
  reviewThumbsDown: Int
  reviewThumbsDown_not: Int
  reviewThumbsDown_in: [Int!]
  reviewThumbsDown_not_in: [Int!]
  reviewThumbsDown_lt: Int
  reviewThumbsDown_lte: Int
  reviewThumbsDown_gt: Int
  reviewThumbsDown_gte: Int
  Comments_every: CommentWhereInput
  Comments_some: CommentWhereInput
  Comments_none: CommentWhereInput
  Author: UserWhereInput
  Stars: StarsWhereInput
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
}

input ReviewWhereUniqueInput {
  id: ID
}

type Stars {
  number: Float!
}

type StarsConnection {
  pageInfo: PageInfo!
  edges: [StarsEdge]!
  aggregate: AggregateStars!
}

input StarsCreateInput {
  number: Float
}

input StarsCreateOneInput {
  create: StarsCreateInput
}

type StarsEdge {
  node: Stars!
  cursor: String!
}

enum StarsOrderByInput {
  number_ASC
  number_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StarsPreviousValues {
  number: Float!
}

type StarsSubscriptionPayload {
  mutation: MutationType!
  node: Stars
  updatedFields: [String!]
  previousValues: StarsPreviousValues
}

input StarsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StarsWhereInput
  AND: [StarsSubscriptionWhereInput!]
  OR: [StarsSubscriptionWhereInput!]
  NOT: [StarsSubscriptionWhereInput!]
}

input StarsUpdateDataInput {
  number: Float
}

input StarsUpdateManyMutationInput {
  number: Float
}

input StarsUpdateOneInput {
  create: StarsCreateInput
  update: StarsUpdateDataInput
  upsert: StarsUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
}

input StarsUpsertNestedInput {
  update: StarsUpdateDataInput!
  create: StarsCreateInput!
}

input StarsWhereInput {
  number: Float
  number_not: Float
  number_in: [Float!]
  number_not_in: [Float!]
  number_lt: Float
  number_lte: Float
  number_gt: Float
  number_gte: Float
  AND: [StarsWhereInput!]
  OR: [StarsWhereInput!]
  NOT: [StarsWhereInput!]
}

type StepArray {
  textBlurbs: String
  imgUrls: String
}

type StepArrayConnection {
  pageInfo: PageInfo!
  edges: [StepArrayEdge]!
  aggregate: AggregateStepArray!
}

input StepArrayCreateInput {
  textBlurbs: String
  imgUrls: String
}

input StepArrayCreateManyInput {
  create: [StepArrayCreateInput!]
}

type StepArrayEdge {
  node: StepArray!
  cursor: String!
}

enum StepArrayOrderByInput {
  textBlurbs_ASC
  textBlurbs_DESC
  imgUrls_ASC
  imgUrls_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StepArrayPreviousValues {
  textBlurbs: String
  imgUrls: String
}

input StepArrayScalarWhereInput {
  textBlurbs: String
  textBlurbs_not: String
  textBlurbs_in: [String!]
  textBlurbs_not_in: [String!]
  textBlurbs_lt: String
  textBlurbs_lte: String
  textBlurbs_gt: String
  textBlurbs_gte: String
  textBlurbs_contains: String
  textBlurbs_not_contains: String
  textBlurbs_starts_with: String
  textBlurbs_not_starts_with: String
  textBlurbs_ends_with: String
  textBlurbs_not_ends_with: String
  imgUrls: String
  imgUrls_not: String
  imgUrls_in: [String!]
  imgUrls_not_in: [String!]
  imgUrls_lt: String
  imgUrls_lte: String
  imgUrls_gt: String
  imgUrls_gte: String
  imgUrls_contains: String
  imgUrls_not_contains: String
  imgUrls_starts_with: String
  imgUrls_not_starts_with: String
  imgUrls_ends_with: String
  imgUrls_not_ends_with: String
  AND: [StepArrayScalarWhereInput!]
  OR: [StepArrayScalarWhereInput!]
  NOT: [StepArrayScalarWhereInput!]
}

type StepArraySubscriptionPayload {
  mutation: MutationType!
  node: StepArray
  updatedFields: [String!]
  previousValues: StepArrayPreviousValues
}

input StepArraySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StepArrayWhereInput
  AND: [StepArraySubscriptionWhereInput!]
  OR: [StepArraySubscriptionWhereInput!]
  NOT: [StepArraySubscriptionWhereInput!]
}

input StepArrayUpdateManyDataInput {
  textBlurbs: String
  imgUrls: String
}

input StepArrayUpdateManyInput {
  create: [StepArrayCreateInput!]
  deleteMany: [StepArrayScalarWhereInput!]
  updateMany: [StepArrayUpdateManyWithWhereNestedInput!]
}

input StepArrayUpdateManyMutationInput {
  textBlurbs: String
  imgUrls: String
}

input StepArrayUpdateManyWithWhereNestedInput {
  where: StepArrayScalarWhereInput!
  data: StepArrayUpdateManyDataInput!
}

input StepArrayWhereInput {
  textBlurbs: String
  textBlurbs_not: String
  textBlurbs_in: [String!]
  textBlurbs_not_in: [String!]
  textBlurbs_lt: String
  textBlurbs_lte: String
  textBlurbs_gt: String
  textBlurbs_gte: String
  textBlurbs_contains: String
  textBlurbs_not_contains: String
  textBlurbs_starts_with: String
  textBlurbs_not_starts_with: String
  textBlurbs_ends_with: String
  textBlurbs_not_ends_with: String
  imgUrls: String
  imgUrls_not: String
  imgUrls_in: [String!]
  imgUrls_not_in: [String!]
  imgUrls_lt: String
  imgUrls_lte: String
  imgUrls_gt: String
  imgUrls_gte: String
  imgUrls_contains: String
  imgUrls_not_contains: String
  imgUrls_starts_with: String
  imgUrls_not_starts_with: String
  imgUrls_ends_with: String
  imgUrls_not_ends_with: String
  AND: [StepArrayWhereInput!]
  OR: [StepArrayWhereInput!]
  NOT: [StepArrayWhereInput!]
}

type Subscription {
  billing(where: BillingSubscriptionWhereInput): BillingSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  privilege(where: PrivilegeSubscriptionWhereInput): PrivilegeSubscriptionPayload
  privileges(where: PrivilegesSubscriptionWhereInput): PrivilegesSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  stars(where: StarsSubscriptionWhereInput): StarsSubscriptionPayload
  stepArray(where: StepArraySubscriptionWhereInput): StepArraySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String!
  password: String!
  email: String!
  ReviewList(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  Billing(where: BillingWhereInput, orderBy: BillingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Billing!]
  Projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  Privileges(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Privilege!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String!
  password: String!
  email: String!
  ReviewList: ReviewCreateManyWithoutAuthorInput
  Billing: BillingCreateManyInput
  Projects: ProjectCreateManyWithoutUserInput
  Privileges: PrivilegeCreateManyInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReviewListInput {
  create: UserCreateWithoutReviewListInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProjectsInput {
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String!
  password: String!
  email: String!
  ReviewList: ReviewCreateManyWithoutAuthorInput
  Billing: BillingCreateManyInput
  Privileges: PrivilegeCreateManyInput
}

input UserCreateWithoutReviewListInput {
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String!
  password: String!
  email: String!
  Billing: BillingCreateManyInput
  Projects: ProjectCreateManyWithoutUserInput
  Privileges: PrivilegeCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  makerRating_ASC
  makerRating_DESC
  reviewerThumbs_ASC
  reviewerThumbs_DESC
  url_ASC
  url_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String!
  password: String!
  email: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String
  password: String
  email: String
  ReviewList: ReviewUpdateManyWithoutAuthorInput
  Billing: BillingUpdateManyInput
  Projects: ProjectUpdateManyWithoutUserInput
  Privileges: PrivilegeUpdateManyInput
}

input UserUpdateInput {
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String
  password: String
  email: String
  ReviewList: ReviewUpdateManyWithoutAuthorInput
  Billing: BillingUpdateManyInput
  Projects: ProjectUpdateManyWithoutUserInput
  Privileges: PrivilegeUpdateManyInput
}

input UserUpdateManyMutationInput {
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String
  password: String
  email: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  update: UserUpdateWithoutProjectsDataInput
  upsert: UserUpsertWithoutProjectsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutReviewListInput {
  create: UserCreateWithoutReviewListInput
  update: UserUpdateWithoutReviewListDataInput
  upsert: UserUpsertWithoutReviewListInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutProjectsDataInput {
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String
  password: String
  email: String
  ReviewList: ReviewUpdateManyWithoutAuthorInput
  Billing: BillingUpdateManyInput
  Privileges: PrivilegeUpdateManyInput
}

input UserUpdateWithoutReviewListDataInput {
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String
  password: String
  email: String
  Billing: BillingUpdateManyInput
  Projects: ProjectUpdateManyWithoutUserInput
  Privileges: PrivilegeUpdateManyInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutProjectsInput {
  update: UserUpdateWithoutProjectsDataInput!
  create: UserCreateWithoutProjectsInput!
}

input UserUpsertWithoutReviewListInput {
  update: UserUpdateWithoutReviewListDataInput!
  create: UserCreateWithoutReviewListInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  makerRating: Float
  makerRating_not: Float
  makerRating_in: [Float!]
  makerRating_not_in: [Float!]
  makerRating_lt: Float
  makerRating_lte: Float
  makerRating_gt: Float
  makerRating_gte: Float
  reviewerThumbs: Int
  reviewerThumbs_not: Int
  reviewerThumbs_in: [Int!]
  reviewerThumbs_not_in: [Int!]
  reviewerThumbs_lt: Int
  reviewerThumbs_lte: Int
  reviewerThumbs_gt: Int
  reviewerThumbs_gte: Int
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  ReviewList_every: ReviewWhereInput
  ReviewList_some: ReviewWhereInput
  ReviewList_none: ReviewWhereInput
  Billing_every: BillingWhereInput
  Billing_some: BillingWhereInput
  Billing_none: BillingWhereInput
  Projects_every: ProjectWhereInput
  Projects_some: ProjectWhereInput
  Projects_none: ProjectWhereInput
  Privileges_every: PrivilegeWhereInput
  Privileges_some: PrivilegeWhereInput
  Privileges_none: PrivilegeWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
`
      }
    