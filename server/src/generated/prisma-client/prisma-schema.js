module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateComment {
  count: Int!
}

type AggregatePrivilege {
  count: Int!
}

type AggregatePrivileges {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateStepArray {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  editedAt: DateTime!
  text: String!
  User: User!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  editedAt: DateTime!
  text: String!
  User: UserCreateOneInput!
}

input CommentCreateManyInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  editedAt_ASC
  editedAt_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: ID!
  editedAt: DateTime!
  text: String!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  editedAt: DateTime
  editedAt_not: DateTime
  editedAt_in: [DateTime!]
  editedAt_not_in: [DateTime!]
  editedAt_lt: DateTime
  editedAt_lte: DateTime
  editedAt_gt: DateTime
  editedAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateDataInput {
  editedAt: DateTime
  text: String
  User: UserUpdateOneRequiredInput
}

input CommentUpdateInput {
  editedAt: DateTime
  text: String
  User: UserUpdateOneRequiredInput
}

input CommentUpdateManyDataInput {
  editedAt: DateTime
  text: String
}

input CommentUpdateManyInput {
  create: [CommentCreateInput!]
  update: [CommentUpdateWithWhereUniqueNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueNestedInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyMutationInput {
  editedAt: DateTime
  text: String
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateDataInput!
}

input CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateDataInput!
  create: CommentCreateInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  editedAt: DateTime
  editedAt_not: DateTime
  editedAt_in: [DateTime!]
  editedAt_not_in: [DateTime!]
  editedAt_lt: DateTime
  editedAt_lte: DateTime
  editedAt_gt: DateTime
  editedAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  User: UserWhereInput
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createPrivilege(data: PrivilegeCreateInput!): Privilege!
  updatePrivilege(data: PrivilegeUpdateInput!, where: PrivilegeWhereUniqueInput!): Privilege
  updateManyPrivileges(data: PrivilegeUpdateManyMutationInput!, where: PrivilegeWhereInput): BatchPayload!
  upsertPrivilege(where: PrivilegeWhereUniqueInput!, create: PrivilegeCreateInput!, update: PrivilegeUpdateInput!): Privilege!
  deletePrivilege(where: PrivilegeWhereUniqueInput!): Privilege
  deleteManyPrivileges(where: PrivilegeWhereInput): BatchPayload!
  createPrivileges(data: PrivilegesCreateInput!): Privileges!
  updateManyPrivilegeses(data: PrivilegesUpdateManyMutationInput!, where: PrivilegesWhereInput): BatchPayload!
  deleteManyPrivilegeses(where: PrivilegesWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createReview(data: ReviewCreateInput!): Review!
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  createStepArray(data: StepArrayCreateInput!): StepArray!
  updateManyStepArrays(data: StepArrayUpdateManyMutationInput!, where: StepArrayWhereInput): BatchPayload!
  deleteManyStepArrays(where: StepArrayWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Privilege {
  id: ID!
  name: String!
}

type PrivilegeConnection {
  pageInfo: PageInfo!
  edges: [PrivilegeEdge]!
  aggregate: AggregatePrivilege!
}

input PrivilegeCreateInput {
  name: String!
}

input PrivilegeCreateManyInput {
  create: [PrivilegeCreateInput!]
  connect: [PrivilegeWhereUniqueInput!]
}

type PrivilegeEdge {
  node: Privilege!
  cursor: String!
}

enum PrivilegeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PrivilegePreviousValues {
  id: ID!
  name: String!
}

type Privileges {
  isModerator: Boolean!
  isAdmin: Boolean!
  isPlebian: Boolean!
}

input PrivilegeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [PrivilegeScalarWhereInput!]
  OR: [PrivilegeScalarWhereInput!]
  NOT: [PrivilegeScalarWhereInput!]
}

type PrivilegesConnection {
  pageInfo: PageInfo!
  edges: [PrivilegesEdge]!
  aggregate: AggregatePrivileges!
}

input PrivilegesCreateInput {
  isModerator: Boolean!
  isAdmin: Boolean!
  isPlebian: Boolean!
}

type PrivilegesEdge {
  node: Privileges!
  cursor: String!
}

enum PrivilegesOrderByInput {
  isModerator_ASC
  isModerator_DESC
  isAdmin_ASC
  isAdmin_DESC
  isPlebian_ASC
  isPlebian_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PrivilegesPreviousValues {
  isModerator: Boolean!
  isAdmin: Boolean!
  isPlebian: Boolean!
}

type PrivilegesSubscriptionPayload {
  mutation: MutationType!
  node: Privileges
  updatedFields: [String!]
  previousValues: PrivilegesPreviousValues
}

input PrivilegesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PrivilegesWhereInput
  AND: [PrivilegesSubscriptionWhereInput!]
  OR: [PrivilegesSubscriptionWhereInput!]
  NOT: [PrivilegesSubscriptionWhereInput!]
}

type PrivilegeSubscriptionPayload {
  mutation: MutationType!
  node: Privilege
  updatedFields: [String!]
  previousValues: PrivilegePreviousValues
}

input PrivilegeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PrivilegeWhereInput
  AND: [PrivilegeSubscriptionWhereInput!]
  OR: [PrivilegeSubscriptionWhereInput!]
  NOT: [PrivilegeSubscriptionWhereInput!]
}

input PrivilegesUpdateManyMutationInput {
  isModerator: Boolean
  isAdmin: Boolean
  isPlebian: Boolean
}

input PrivilegesWhereInput {
  isModerator: Boolean
  isModerator_not: Boolean
  isAdmin: Boolean
  isAdmin_not: Boolean
  isPlebian: Boolean
  isPlebian_not: Boolean
  AND: [PrivilegesWhereInput!]
  OR: [PrivilegesWhereInput!]
  NOT: [PrivilegesWhereInput!]
}

input PrivilegeUpdateDataInput {
  name: String
}

input PrivilegeUpdateInput {
  name: String
}

input PrivilegeUpdateManyDataInput {
  name: String
}

input PrivilegeUpdateManyInput {
  create: [PrivilegeCreateInput!]
  update: [PrivilegeUpdateWithWhereUniqueNestedInput!]
  upsert: [PrivilegeUpsertWithWhereUniqueNestedInput!]
  delete: [PrivilegeWhereUniqueInput!]
  connect: [PrivilegeWhereUniqueInput!]
  set: [PrivilegeWhereUniqueInput!]
  disconnect: [PrivilegeWhereUniqueInput!]
  deleteMany: [PrivilegeScalarWhereInput!]
  updateMany: [PrivilegeUpdateManyWithWhereNestedInput!]
}

input PrivilegeUpdateManyMutationInput {
  name: String
}

input PrivilegeUpdateManyWithWhereNestedInput {
  where: PrivilegeScalarWhereInput!
  data: PrivilegeUpdateManyDataInput!
}

input PrivilegeUpdateWithWhereUniqueNestedInput {
  where: PrivilegeWhereUniqueInput!
  data: PrivilegeUpdateDataInput!
}

input PrivilegeUpsertWithWhereUniqueNestedInput {
  where: PrivilegeWhereUniqueInput!
  update: PrivilegeUpdateDataInput!
  create: PrivilegeCreateInput!
}

input PrivilegeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [PrivilegeWhereInput!]
  OR: [PrivilegeWhereInput!]
  NOT: [PrivilegeWhereInput!]
}

input PrivilegeWhereUniqueInput {
  id: ID
}

type Project {
  id: ID!
  name: String!
  category: String!
  timestamp: String!
  titleImg: String!
  titleBlurb: String!
  rating: Float!
  authorName: String!
  Steps(where: StepArrayWhereInput, orderBy: StepArrayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StepArray!]
  Reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  name: String!
  category: String!
  timestamp: String!
  titleImg: String!
  titleBlurb: String!
  rating: Float
  authorName: String!
  Steps: StepArrayCreateManyInput
  Reviews: ReviewCreateManyInput
}

input ProjectCreateManyInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  category_ASC
  category_DESC
  timestamp_ASC
  timestamp_DESC
  titleImg_ASC
  titleImg_DESC
  titleBlurb_ASC
  titleBlurb_DESC
  rating_ASC
  rating_DESC
  authorName_ASC
  authorName_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  name: String!
  category: String!
  timestamp: String!
  titleImg: String!
  titleBlurb: String!
  rating: Float!
  authorName: String!
}

input ProjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  timestamp: String
  timestamp_not: String
  timestamp_in: [String!]
  timestamp_not_in: [String!]
  timestamp_lt: String
  timestamp_lte: String
  timestamp_gt: String
  timestamp_gte: String
  timestamp_contains: String
  timestamp_not_contains: String
  timestamp_starts_with: String
  timestamp_not_starts_with: String
  timestamp_ends_with: String
  timestamp_not_ends_with: String
  titleImg: String
  titleImg_not: String
  titleImg_in: [String!]
  titleImg_not_in: [String!]
  titleImg_lt: String
  titleImg_lte: String
  titleImg_gt: String
  titleImg_gte: String
  titleImg_contains: String
  titleImg_not_contains: String
  titleImg_starts_with: String
  titleImg_not_starts_with: String
  titleImg_ends_with: String
  titleImg_not_ends_with: String
  titleBlurb: String
  titleBlurb_not: String
  titleBlurb_in: [String!]
  titleBlurb_not_in: [String!]
  titleBlurb_lt: String
  titleBlurb_lte: String
  titleBlurb_gt: String
  titleBlurb_gte: String
  titleBlurb_contains: String
  titleBlurb_not_contains: String
  titleBlurb_starts_with: String
  titleBlurb_not_starts_with: String
  titleBlurb_ends_with: String
  titleBlurb_not_ends_with: String
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  authorName: String
  authorName_not: String
  authorName_in: [String!]
  authorName_not_in: [String!]
  authorName_lt: String
  authorName_lte: String
  authorName_gt: String
  authorName_gte: String
  authorName_contains: String
  authorName_not_contains: String
  authorName_starts_with: String
  authorName_not_starts_with: String
  authorName_ends_with: String
  authorName_not_ends_with: String
  AND: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateDataInput {
  name: String
  category: String
  timestamp: String
  titleImg: String
  titleBlurb: String
  rating: Float
  authorName: String
  Steps: StepArrayUpdateManyInput
  Reviews: ReviewUpdateManyInput
}

input ProjectUpdateInput {
  name: String
  category: String
  timestamp: String
  titleImg: String
  titleBlurb: String
  rating: Float
  authorName: String
  Steps: StepArrayUpdateManyInput
  Reviews: ReviewUpdateManyInput
}

input ProjectUpdateManyDataInput {
  name: String
  category: String
  timestamp: String
  titleImg: String
  titleBlurb: String
  rating: Float
  authorName: String
}

input ProjectUpdateManyInput {
  create: [ProjectCreateInput!]
  update: [ProjectUpdateWithWhereUniqueNestedInput!]
  upsert: [ProjectUpsertWithWhereUniqueNestedInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyMutationInput {
  name: String
  category: String
  timestamp: String
  titleImg: String
  titleBlurb: String
  rating: Float
  authorName: String
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdateWithWhereUniqueNestedInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateDataInput!
}

input ProjectUpsertWithWhereUniqueNestedInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateDataInput!
  create: ProjectCreateInput!
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  timestamp: String
  timestamp_not: String
  timestamp_in: [String!]
  timestamp_not_in: [String!]
  timestamp_lt: String
  timestamp_lte: String
  timestamp_gt: String
  timestamp_gte: String
  timestamp_contains: String
  timestamp_not_contains: String
  timestamp_starts_with: String
  timestamp_not_starts_with: String
  timestamp_ends_with: String
  timestamp_not_ends_with: String
  titleImg: String
  titleImg_not: String
  titleImg_in: [String!]
  titleImg_not_in: [String!]
  titleImg_lt: String
  titleImg_lte: String
  titleImg_gt: String
  titleImg_gte: String
  titleImg_contains: String
  titleImg_not_contains: String
  titleImg_starts_with: String
  titleImg_not_starts_with: String
  titleImg_ends_with: String
  titleImg_not_ends_with: String
  titleBlurb: String
  titleBlurb_not: String
  titleBlurb_in: [String!]
  titleBlurb_not_in: [String!]
  titleBlurb_lt: String
  titleBlurb_lte: String
  titleBlurb_gt: String
  titleBlurb_gte: String
  titleBlurb_contains: String
  titleBlurb_not_contains: String
  titleBlurb_starts_with: String
  titleBlurb_not_starts_with: String
  titleBlurb_ends_with: String
  titleBlurb_not_ends_with: String
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  authorName: String
  authorName_not: String
  authorName_in: [String!]
  authorName_not_in: [String!]
  authorName_lt: String
  authorName_lte: String
  authorName_gt: String
  authorName_gte: String
  authorName_contains: String
  authorName_not_contains: String
  authorName_starts_with: String
  authorName_not_starts_with: String
  authorName_ends_with: String
  authorName_not_ends_with: String
  Steps_every: StepArrayWhereInput
  Steps_some: StepArrayWhereInput
  Steps_none: StepArrayWhereInput
  Reviews_every: ReviewWhereInput
  Reviews_some: ReviewWhereInput
  Reviews_none: ReviewWhereInput
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  privilege(where: PrivilegeWhereUniqueInput!): Privilege
  privileges(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Privilege]!
  privilegesConnection(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PrivilegeConnection!
  privilegeses(where: PrivilegesWhereInput, orderBy: PrivilegesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Privileges]!
  privilegesesConnection(where: PrivilegesWhereInput, orderBy: PrivilegesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PrivilegesConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  stepArrays(where: StepArrayWhereInput, orderBy: StepArrayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StepArray]!
  stepArraysConnection(where: StepArrayWhereInput, orderBy: StepArrayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StepArrayConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Review {
  id: ID!
  title: String!
  text: String!
  editedAt: String!
  rating: Float!
  reviewThumbsUp: Int
  reviewThumbsDown: Int
  Comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  Author: User!
}

type ReviewConnection {
  pageInfo: PageInfo!
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  title: String!
  text: String!
  editedAt: String!
  rating: Float
  reviewThumbsUp: Int
  reviewThumbsDown: Int
  Comments: CommentCreateManyInput
  Author: UserCreateOneWithoutReviewListInput!
}

input ReviewCreateManyInput {
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateManyWithoutAuthorInput {
  create: [ReviewCreateWithoutAuthorInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutAuthorInput {
  title: String!
  text: String!
  editedAt: String!
  rating: Float
  reviewThumbsUp: Int
  reviewThumbsDown: Int
  Comments: CommentCreateManyInput
}

type ReviewEdge {
  node: Review!
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  editedAt_ASC
  editedAt_DESC
  rating_ASC
  rating_DESC
  reviewThumbsUp_ASC
  reviewThumbsUp_DESC
  reviewThumbsDown_ASC
  reviewThumbsDown_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReviewPreviousValues {
  id: ID!
  title: String!
  text: String!
  editedAt: String!
  rating: Float!
  reviewThumbsUp: Int
  reviewThumbsDown: Int
}

input ReviewScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  editedAt: String
  editedAt_not: String
  editedAt_in: [String!]
  editedAt_not_in: [String!]
  editedAt_lt: String
  editedAt_lte: String
  editedAt_gt: String
  editedAt_gte: String
  editedAt_contains: String
  editedAt_not_contains: String
  editedAt_starts_with: String
  editedAt_not_starts_with: String
  editedAt_ends_with: String
  editedAt_not_ends_with: String
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  reviewThumbsUp: Int
  reviewThumbsUp_not: Int
  reviewThumbsUp_in: [Int!]
  reviewThumbsUp_not_in: [Int!]
  reviewThumbsUp_lt: Int
  reviewThumbsUp_lte: Int
  reviewThumbsUp_gt: Int
  reviewThumbsUp_gte: Int
  reviewThumbsDown: Int
  reviewThumbsDown_not: Int
  reviewThumbsDown_in: [Int!]
  reviewThumbsDown_not_in: [Int!]
  reviewThumbsDown_lt: Int
  reviewThumbsDown_lte: Int
  reviewThumbsDown_gt: Int
  reviewThumbsDown_gte: Int
  AND: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  NOT: [ReviewScalarWhereInput!]
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
  AND: [ReviewSubscriptionWhereInput!]
  OR: [ReviewSubscriptionWhereInput!]
  NOT: [ReviewSubscriptionWhereInput!]
}

input ReviewUpdateDataInput {
  title: String
  text: String
  editedAt: String
  rating: Float
  reviewThumbsUp: Int
  reviewThumbsDown: Int
  Comments: CommentUpdateManyInput
  Author: UserUpdateOneRequiredWithoutReviewListInput
}

input ReviewUpdateInput {
  title: String
  text: String
  editedAt: String
  rating: Float
  reviewThumbsUp: Int
  reviewThumbsDown: Int
  Comments: CommentUpdateManyInput
  Author: UserUpdateOneRequiredWithoutReviewListInput
}

input ReviewUpdateManyDataInput {
  title: String
  text: String
  editedAt: String
  rating: Float
  reviewThumbsUp: Int
  reviewThumbsDown: Int
}

input ReviewUpdateManyInput {
  create: [ReviewCreateInput!]
  update: [ReviewUpdateWithWhereUniqueNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueNestedInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyMutationInput {
  title: String
  text: String
  editedAt: String
  rating: Float
  reviewThumbsUp: Int
  reviewThumbsDown: Int
}

input ReviewUpdateManyWithoutAuthorInput {
  create: [ReviewCreateWithoutAuthorInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyDataInput!
}

input ReviewUpdateWithoutAuthorDataInput {
  title: String
  text: String
  editedAt: String
  rating: Float
  reviewThumbsUp: Int
  reviewThumbsDown: Int
  Comments: CommentUpdateManyInput
}

input ReviewUpdateWithWhereUniqueNestedInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateDataInput!
}

input ReviewUpdateWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutAuthorDataInput!
}

input ReviewUpsertWithWhereUniqueNestedInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateDataInput!
  create: ReviewCreateInput!
}

input ReviewUpsertWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutAuthorDataInput!
  create: ReviewCreateWithoutAuthorInput!
}

input ReviewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  editedAt: String
  editedAt_not: String
  editedAt_in: [String!]
  editedAt_not_in: [String!]
  editedAt_lt: String
  editedAt_lte: String
  editedAt_gt: String
  editedAt_gte: String
  editedAt_contains: String
  editedAt_not_contains: String
  editedAt_starts_with: String
  editedAt_not_starts_with: String
  editedAt_ends_with: String
  editedAt_not_ends_with: String
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  reviewThumbsUp: Int
  reviewThumbsUp_not: Int
  reviewThumbsUp_in: [Int!]
  reviewThumbsUp_not_in: [Int!]
  reviewThumbsUp_lt: Int
  reviewThumbsUp_lte: Int
  reviewThumbsUp_gt: Int
  reviewThumbsUp_gte: Int
  reviewThumbsDown: Int
  reviewThumbsDown_not: Int
  reviewThumbsDown_in: [Int!]
  reviewThumbsDown_not_in: [Int!]
  reviewThumbsDown_lt: Int
  reviewThumbsDown_lte: Int
  reviewThumbsDown_gt: Int
  reviewThumbsDown_gte: Int
  Comments_every: CommentWhereInput
  Comments_some: CommentWhereInput
  Comments_none: CommentWhereInput
  Author: UserWhereInput
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
}

input ReviewWhereUniqueInput {
  id: ID
}

type StepArray {
  textBlurbs: String
  imgUrls: String
}

type StepArrayConnection {
  pageInfo: PageInfo!
  edges: [StepArrayEdge]!
  aggregate: AggregateStepArray!
}

input StepArrayCreateInput {
  textBlurbs: String
  imgUrls: String
}

input StepArrayCreateManyInput {
  create: [StepArrayCreateInput!]
}

type StepArrayEdge {
  node: StepArray!
  cursor: String!
}

enum StepArrayOrderByInput {
  textBlurbs_ASC
  textBlurbs_DESC
  imgUrls_ASC
  imgUrls_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StepArrayPreviousValues {
  textBlurbs: String
  imgUrls: String
}

input StepArrayScalarWhereInput {
  textBlurbs: String
  textBlurbs_not: String
  textBlurbs_in: [String!]
  textBlurbs_not_in: [String!]
  textBlurbs_lt: String
  textBlurbs_lte: String
  textBlurbs_gt: String
  textBlurbs_gte: String
  textBlurbs_contains: String
  textBlurbs_not_contains: String
  textBlurbs_starts_with: String
  textBlurbs_not_starts_with: String
  textBlurbs_ends_with: String
  textBlurbs_not_ends_with: String
  imgUrls: String
  imgUrls_not: String
  imgUrls_in: [String!]
  imgUrls_not_in: [String!]
  imgUrls_lt: String
  imgUrls_lte: String
  imgUrls_gt: String
  imgUrls_gte: String
  imgUrls_contains: String
  imgUrls_not_contains: String
  imgUrls_starts_with: String
  imgUrls_not_starts_with: String
  imgUrls_ends_with: String
  imgUrls_not_ends_with: String
  AND: [StepArrayScalarWhereInput!]
  OR: [StepArrayScalarWhereInput!]
  NOT: [StepArrayScalarWhereInput!]
}

type StepArraySubscriptionPayload {
  mutation: MutationType!
  node: StepArray
  updatedFields: [String!]
  previousValues: StepArrayPreviousValues
}

input StepArraySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StepArrayWhereInput
  AND: [StepArraySubscriptionWhereInput!]
  OR: [StepArraySubscriptionWhereInput!]
  NOT: [StepArraySubscriptionWhereInput!]
}

input StepArrayUpdateManyDataInput {
  textBlurbs: String
  imgUrls: String
}

input StepArrayUpdateManyInput {
  create: [StepArrayCreateInput!]
  deleteMany: [StepArrayScalarWhereInput!]
  updateMany: [StepArrayUpdateManyWithWhereNestedInput!]
}

input StepArrayUpdateManyMutationInput {
  textBlurbs: String
  imgUrls: String
}

input StepArrayUpdateManyWithWhereNestedInput {
  where: StepArrayScalarWhereInput!
  data: StepArrayUpdateManyDataInput!
}

input StepArrayWhereInput {
  textBlurbs: String
  textBlurbs_not: String
  textBlurbs_in: [String!]
  textBlurbs_not_in: [String!]
  textBlurbs_lt: String
  textBlurbs_lte: String
  textBlurbs_gt: String
  textBlurbs_gte: String
  textBlurbs_contains: String
  textBlurbs_not_contains: String
  textBlurbs_starts_with: String
  textBlurbs_not_starts_with: String
  textBlurbs_ends_with: String
  textBlurbs_not_ends_with: String
  imgUrls: String
  imgUrls_not: String
  imgUrls_in: [String!]
  imgUrls_not_in: [String!]
  imgUrls_lt: String
  imgUrls_lte: String
  imgUrls_gt: String
  imgUrls_gte: String
  imgUrls_contains: String
  imgUrls_not_contains: String
  imgUrls_starts_with: String
  imgUrls_not_starts_with: String
  imgUrls_ends_with: String
  imgUrls_not_ends_with: String
  AND: [StepArrayWhereInput!]
  OR: [StepArrayWhereInput!]
  NOT: [StepArrayWhereInput!]
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  privilege(where: PrivilegeSubscriptionWhereInput): PrivilegeSubscriptionPayload
  privileges(where: PrivilegesSubscriptionWhereInput): PrivilegesSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  stepArray(where: StepArraySubscriptionWhereInput): StepArraySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String!
  password: String!
  email: String!
  ReviewList(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  Projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  Privileges(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Privilege!]
  stripeId: String
  accountType: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String!
  password: String!
  email: String!
  ReviewList: ReviewCreateManyWithoutAuthorInput
  Projects: ProjectCreateManyInput
  Privileges: PrivilegeCreateManyInput
  stripeId: String
  accountType: String
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReviewListInput {
  create: UserCreateWithoutReviewListInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutReviewListInput {
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String!
  password: String!
  email: String!
  Projects: ProjectCreateManyInput
  Privileges: PrivilegeCreateManyInput
  stripeId: String
  accountType: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  makerRating_ASC
  makerRating_DESC
  reviewerThumbs_ASC
  reviewerThumbs_DESC
  url_ASC
  url_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  stripeId_ASC
  stripeId_DESC
  accountType_ASC
  accountType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String!
  password: String!
  email: String!
  stripeId: String
  accountType: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String
  password: String
  email: String
  ReviewList: ReviewUpdateManyWithoutAuthorInput
  Projects: ProjectUpdateManyInput
  Privileges: PrivilegeUpdateManyInput
  stripeId: String
  accountType: String
}

input UserUpdateInput {
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String
  password: String
  email: String
  ReviewList: ReviewUpdateManyWithoutAuthorInput
  Projects: ProjectUpdateManyInput
  Privileges: PrivilegeUpdateManyInput
  stripeId: String
  accountType: String
}

input UserUpdateManyMutationInput {
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String
  password: String
  email: String
  stripeId: String
  accountType: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutReviewListInput {
  create: UserCreateWithoutReviewListInput
  update: UserUpdateWithoutReviewListDataInput
  upsert: UserUpsertWithoutReviewListInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutReviewListDataInput {
  makerRating: Float
  reviewerThumbs: Int
  url: String
  username: String
  password: String
  email: String
  Projects: ProjectUpdateManyInput
  Privileges: PrivilegeUpdateManyInput
  stripeId: String
  accountType: String
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutReviewListInput {
  update: UserUpdateWithoutReviewListDataInput!
  create: UserCreateWithoutReviewListInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  makerRating: Float
  makerRating_not: Float
  makerRating_in: [Float!]
  makerRating_not_in: [Float!]
  makerRating_lt: Float
  makerRating_lte: Float
  makerRating_gt: Float
  makerRating_gte: Float
  reviewerThumbs: Int
  reviewerThumbs_not: Int
  reviewerThumbs_in: [Int!]
  reviewerThumbs_not_in: [Int!]
  reviewerThumbs_lt: Int
  reviewerThumbs_lte: Int
  reviewerThumbs_gt: Int
  reviewerThumbs_gte: Int
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  ReviewList_every: ReviewWhereInput
  ReviewList_some: ReviewWhereInput
  ReviewList_none: ReviewWhereInput
  Projects_every: ProjectWhereInput
  Projects_some: ProjectWhereInput
  Projects_none: ProjectWhereInput
  Privileges_every: PrivilegeWhereInput
  Privileges_some: PrivilegeWhereInput
  Privileges_none: PrivilegeWhereInput
  stripeId: String
  stripeId_not: String
  stripeId_in: [String!]
  stripeId_not_in: [String!]
  stripeId_lt: String
  stripeId_lte: String
  stripeId_gt: String
  stripeId_gte: String
  stripeId_contains: String
  stripeId_not_contains: String
  stripeId_starts_with: String
  stripeId_not_starts_with: String
  stripeId_ends_with: String
  stripeId_not_ends_with: String
  accountType: String
  accountType_not: String
  accountType_in: [String!]
  accountType_not_in: [String!]
  accountType_lt: String
  accountType_lte: String
  accountType_gt: String
  accountType_gte: String
  accountType_contains: String
  accountType_not_contains: String
  accountType_starts_with: String
  accountType_not_starts_with: String
  accountType_ends_with: String
  accountType_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
`
      }
    