### This file was autogenerated by Nexus 0.11.5
### Do not make changes to this file directly


type AggregateProject {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createProject(data: ProjectCreateInput!): Project!
  createReview(data: ReviewCreateInput!): Review!
  createSubscription(email: String, source: String): User!
  createUser(data: UserCreateInput!): User!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteUser(where: UserWhereUniqueInput!): User
  dislikeAReview(didThumbDown: Boolean, revId: ID, username: String): Review!
  editProject(category: String, id: ID, name: String, steps: String, timestamp: String, titleBlurb: String, titleImg: String, username: String): Project!
  editReview(name: String, projId: ID, projRating: Int, revId: ID, text: String, timestamp: String): Review!
  editUser(bio: String, email: String, userProfileImage: String): User!
  firebaseSignUp(email: String, thirdPartyUID: String, username: String): User!
  likeAReview(didThumbUp: Boolean, revId: ID, username: String): Review!
  newProject(category: String, name: String, steps: String, timestamp: String, titleBlurb: String, titleImg: String, username: String): Project!
  newReview(id: ID, name: String, projRating: Int, text: String, timestamp: String, user: String, username: String): Review!
  newUser(email: String, firebaseUID: String, username: String): User!
  rateAProject(id: ID, rating: Int, username: String): Project!
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertProject(create: ProjectCreateInput!, update: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project!
  upsertReview(create: ReviewCreateInput!, update: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Project {
  category: String!
  id: ID!
  key: String
  name: String!
  RatedBy(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  rating: [Int!]!
  Reviews(after: String, before: String, first: Int, last: Int, orderBy: ReviewOrderByInput, skip: Int, where: ReviewWhereInput): [Review!]
  steps: String!
  timestamp: DateTime!
  titleBlurb: String!
  titleImg: String!
  User: User!
}

type ProjectConnection {
  aggregate: AggregateProject!
  edges: [ProjectEdge!]!
  pageInfo: PageInfo!
}

input ProjectCreateInput {
  category: String!
  key: String
  name: String!
  RatedBy: UserCreateManyWithoutRatedProjectsInput
  rating: ProjectCreateratingInput
  Reviews: ReviewCreateManyWithoutProjectReviewedInput
  steps: String
  timestamp: DateTime!
  titleBlurb: String
  titleImg: String
  User: UserCreateOneWithoutProjectsInput!
}

input ProjectCreateManyWithoutRatedByInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutRatedByInput!]
}

input ProjectCreateManyWithoutUserInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutUserInput!]
}

input ProjectCreateOneWithoutReviewsInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutReviewsInput
}

input ProjectCreateratingInput {
  set: [Int!]
}

input ProjectCreateWithoutRatedByInput {
  category: String!
  key: String
  name: String!
  rating: ProjectCreateratingInput
  Reviews: ReviewCreateManyWithoutProjectReviewedInput
  steps: String
  timestamp: DateTime!
  titleBlurb: String
  titleImg: String
  User: UserCreateOneWithoutProjectsInput!
}

input ProjectCreateWithoutReviewsInput {
  category: String!
  key: String
  name: String!
  RatedBy: UserCreateManyWithoutRatedProjectsInput
  rating: ProjectCreateratingInput
  steps: String
  timestamp: DateTime!
  titleBlurb: String
  titleImg: String
  User: UserCreateOneWithoutProjectsInput!
}

input ProjectCreateWithoutUserInput {
  category: String!
  key: String
  name: String!
  RatedBy: UserCreateManyWithoutRatedProjectsInput
  rating: ProjectCreateratingInput
  Reviews: ReviewCreateManyWithoutProjectReviewedInput
  steps: String
  timestamp: DateTime!
  titleBlurb: String
  titleImg: String
}

type ProjectEdge {
  cursor: String!
  node: Project!
}

enum ProjectOrderByInput {
  category_ASC
  category_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  name_ASC
  name_DESC
  steps_ASC
  steps_DESC
  timestamp_ASC
  timestamp_DESC
  titleBlurb_ASC
  titleBlurb_DESC
  titleImg_ASC
  titleImg_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput!]
  category: String
  category_contains: String
  category_ends_with: String
  category_gt: String
  category_gte: String
  category_in: [String!]
  category_lt: String
  category_lte: String
  category_not: String
  category_not_contains: String
  category_not_ends_with: String
  category_not_in: [String!]
  category_not_starts_with: String
  category_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  key: String
  key_contains: String
  key_ends_with: String
  key_gt: String
  key_gte: String
  key_in: [String!]
  key_lt: String
  key_lte: String
  key_not: String
  key_not_contains: String
  key_not_ends_with: String
  key_not_in: [String!]
  key_not_starts_with: String
  key_starts_with: String
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  steps: String
  steps_contains: String
  steps_ends_with: String
  steps_gt: String
  steps_gte: String
  steps_in: [String!]
  steps_lt: String
  steps_lte: String
  steps_not: String
  steps_not_contains: String
  steps_not_ends_with: String
  steps_not_in: [String!]
  steps_not_starts_with: String
  steps_starts_with: String
  timestamp: DateTime
  timestamp_gt: DateTime
  timestamp_gte: DateTime
  timestamp_in: [DateTime!]
  timestamp_lt: DateTime
  timestamp_lte: DateTime
  timestamp_not: DateTime
  timestamp_not_in: [DateTime!]
  titleBlurb: String
  titleBlurb_contains: String
  titleBlurb_ends_with: String
  titleBlurb_gt: String
  titleBlurb_gte: String
  titleBlurb_in: [String!]
  titleBlurb_lt: String
  titleBlurb_lte: String
  titleBlurb_not: String
  titleBlurb_not_contains: String
  titleBlurb_not_ends_with: String
  titleBlurb_not_in: [String!]
  titleBlurb_not_starts_with: String
  titleBlurb_starts_with: String
  titleImg: String
  titleImg_contains: String
  titleImg_ends_with: String
  titleImg_gt: String
  titleImg_gte: String
  titleImg_in: [String!]
  titleImg_lt: String
  titleImg_lte: String
  titleImg_not: String
  titleImg_not_contains: String
  titleImg_not_ends_with: String
  titleImg_not_in: [String!]
  titleImg_not_starts_with: String
  titleImg_starts_with: String
}

input ProjectUpdateInput {
  category: String
  key: String
  name: String
  RatedBy: UserUpdateManyWithoutRatedProjectsInput
  rating: ProjectUpdateratingInput
  Reviews: ReviewUpdateManyWithoutProjectReviewedInput
  steps: String
  timestamp: DateTime
  titleBlurb: String
  titleImg: String
  User: UserUpdateOneRequiredWithoutProjectsInput
}

input ProjectUpdateManyDataInput {
  category: String
  key: String
  name: String
  rating: ProjectUpdateratingInput
  steps: String
  timestamp: DateTime
  titleBlurb: String
  titleImg: String
}

input ProjectUpdateManyMutationInput {
  category: String
  key: String
  name: String
  rating: ProjectUpdateratingInput
  steps: String
  timestamp: DateTime
  titleBlurb: String
  titleImg: String
}

input ProjectUpdateManyWithoutRatedByInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutRatedByInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutRatedByInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutRatedByInput!]
}

input ProjectUpdateManyWithoutUserInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutUserInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutUserInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  data: ProjectUpdateManyDataInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateOneRequiredWithoutReviewsInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutReviewsInput
  update: ProjectUpdateWithoutReviewsDataInput
  upsert: ProjectUpsertWithoutReviewsInput
}

input ProjectUpdateratingInput {
  set: [Int!]
}

input ProjectUpdateWithoutRatedByDataInput {
  category: String
  key: String
  name: String
  rating: ProjectUpdateratingInput
  Reviews: ReviewUpdateManyWithoutProjectReviewedInput
  steps: String
  timestamp: DateTime
  titleBlurb: String
  titleImg: String
  User: UserUpdateOneRequiredWithoutProjectsInput
}

input ProjectUpdateWithoutReviewsDataInput {
  category: String
  key: String
  name: String
  RatedBy: UserUpdateManyWithoutRatedProjectsInput
  rating: ProjectUpdateratingInput
  steps: String
  timestamp: DateTime
  titleBlurb: String
  titleImg: String
  User: UserUpdateOneRequiredWithoutProjectsInput
}

input ProjectUpdateWithoutUserDataInput {
  category: String
  key: String
  name: String
  RatedBy: UserUpdateManyWithoutRatedProjectsInput
  rating: ProjectUpdateratingInput
  Reviews: ReviewUpdateManyWithoutProjectReviewedInput
  steps: String
  timestamp: DateTime
  titleBlurb: String
  titleImg: String
}

input ProjectUpdateWithWhereUniqueWithoutRatedByInput {
  data: ProjectUpdateWithoutRatedByDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithWhereUniqueWithoutUserInput {
  data: ProjectUpdateWithoutUserDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithoutReviewsInput {
  create: ProjectCreateWithoutReviewsInput!
  update: ProjectUpdateWithoutReviewsDataInput!
}

input ProjectUpsertWithWhereUniqueWithoutRatedByInput {
  create: ProjectCreateWithoutRatedByInput!
  update: ProjectUpdateWithoutRatedByDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutUserInput {
  create: ProjectCreateWithoutUserInput!
  update: ProjectUpdateWithoutUserDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  category: String
  category_contains: String
  category_ends_with: String
  category_gt: String
  category_gte: String
  category_in: [String!]
  category_lt: String
  category_lte: String
  category_not: String
  category_not_contains: String
  category_not_ends_with: String
  category_not_in: [String!]
  category_not_starts_with: String
  category_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  key: String
  key_contains: String
  key_ends_with: String
  key_gt: String
  key_gte: String
  key_in: [String!]
  key_lt: String
  key_lte: String
  key_not: String
  key_not_contains: String
  key_not_ends_with: String
  key_not_in: [String!]
  key_not_starts_with: String
  key_starts_with: String
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  RatedBy_every: UserWhereInput
  RatedBy_none: UserWhereInput
  RatedBy_some: UserWhereInput
  Reviews_every: ReviewWhereInput
  Reviews_none: ReviewWhereInput
  Reviews_some: ReviewWhereInput
  steps: String
  steps_contains: String
  steps_ends_with: String
  steps_gt: String
  steps_gte: String
  steps_in: [String!]
  steps_lt: String
  steps_lte: String
  steps_not: String
  steps_not_contains: String
  steps_not_ends_with: String
  steps_not_in: [String!]
  steps_not_starts_with: String
  steps_starts_with: String
  timestamp: DateTime
  timestamp_gt: DateTime
  timestamp_gte: DateTime
  timestamp_in: [DateTime!]
  timestamp_lt: DateTime
  timestamp_lte: DateTime
  timestamp_not: DateTime
  timestamp_not_in: [DateTime!]
  titleBlurb: String
  titleBlurb_contains: String
  titleBlurb_ends_with: String
  titleBlurb_gt: String
  titleBlurb_gte: String
  titleBlurb_in: [String!]
  titleBlurb_lt: String
  titleBlurb_lte: String
  titleBlurb_not: String
  titleBlurb_not_contains: String
  titleBlurb_not_ends_with: String
  titleBlurb_not_in: [String!]
  titleBlurb_not_starts_with: String
  titleBlurb_starts_with: String
  titleImg: String
  titleImg_contains: String
  titleImg_ends_with: String
  titleImg_gt: String
  titleImg_gte: String
  titleImg_in: [String!]
  titleImg_lt: String
  titleImg_lte: String
  titleImg_not: String
  titleImg_not_contains: String
  titleImg_not_ends_with: String
  titleImg_not_in: [String!]
  titleImg_not_starts_with: String
  titleImg_starts_with: String
  User: UserWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
  key: String
}

type Query {
  project(where: ProjectWhereUniqueInput!): Project
  projects(after: String, before: String, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): [Project!]!
  projectsConnection(after: String, before: String, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): ProjectConnection!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(after: String, before: String, first: Int, last: Int, orderBy: ReviewOrderByInput, skip: Int, where: ReviewWhereInput): [Review!]!
  reviewsConnection(after: String, before: String, first: Int, last: Int, orderBy: ReviewOrderByInput, skip: Int, where: ReviewWhereInput): ReviewConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

type Review {
  Author: User!
  DislikedBy(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  id: ID!
  LikedBy(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  name: String!
  ProjectReviewed: Project!
  projRating: Int
  rKey: String
  text: String!
  thumbsDown: Int!
  thumbsUp: Int!
  timestamp: DateTime!
}

type ReviewConnection {
  aggregate: AggregateReview!
  edges: [ReviewEdge!]!
  pageInfo: PageInfo!
}

input ReviewCreateInput {
  Author: UserCreateOneWithoutReviewListInput!
  DislikedBy: UserCreateManyWithoutDislikedReviewsInput
  LikedBy: UserCreateManyWithoutLikedReviewsInput
  name: String!
  ProjectReviewed: ProjectCreateOneWithoutReviewsInput!
  projRating: Int
  rKey: String
  text: String!
  thumbsDown: Int
  thumbsUp: Int
  timestamp: DateTime!
}

input ReviewCreateManyWithoutAuthorInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutAuthorInput!]
}

input ReviewCreateManyWithoutDislikedByInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutDislikedByInput!]
}

input ReviewCreateManyWithoutLikedByInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutLikedByInput!]
}

input ReviewCreateManyWithoutProjectReviewedInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutProjectReviewedInput!]
}

input ReviewCreateWithoutAuthorInput {
  DislikedBy: UserCreateManyWithoutDislikedReviewsInput
  LikedBy: UserCreateManyWithoutLikedReviewsInput
  name: String!
  ProjectReviewed: ProjectCreateOneWithoutReviewsInput!
  projRating: Int
  rKey: String
  text: String!
  thumbsDown: Int
  thumbsUp: Int
  timestamp: DateTime!
}

input ReviewCreateWithoutDislikedByInput {
  Author: UserCreateOneWithoutReviewListInput!
  LikedBy: UserCreateManyWithoutLikedReviewsInput
  name: String!
  ProjectReviewed: ProjectCreateOneWithoutReviewsInput!
  projRating: Int
  rKey: String
  text: String!
  thumbsDown: Int
  thumbsUp: Int
  timestamp: DateTime!
}

input ReviewCreateWithoutLikedByInput {
  Author: UserCreateOneWithoutReviewListInput!
  DislikedBy: UserCreateManyWithoutDislikedReviewsInput
  name: String!
  ProjectReviewed: ProjectCreateOneWithoutReviewsInput!
  projRating: Int
  rKey: String
  text: String!
  thumbsDown: Int
  thumbsUp: Int
  timestamp: DateTime!
}

input ReviewCreateWithoutProjectReviewedInput {
  Author: UserCreateOneWithoutReviewListInput!
  DislikedBy: UserCreateManyWithoutDislikedReviewsInput
  LikedBy: UserCreateManyWithoutLikedReviewsInput
  name: String!
  projRating: Int
  rKey: String
  text: String!
  thumbsDown: Int
  thumbsUp: Int
  timestamp: DateTime!
}

type ReviewEdge {
  cursor: String!
  node: Review!
}

enum ReviewOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  projRating_ASC
  projRating_DESC
  rKey_ASC
  rKey_DESC
  text_ASC
  text_DESC
  thumbsDown_ASC
  thumbsDown_DESC
  thumbsUp_ASC
  thumbsUp_DESC
  timestamp_ASC
  timestamp_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ReviewScalarWhereInput {
  AND: [ReviewScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  projRating: Int
  projRating_gt: Int
  projRating_gte: Int
  projRating_in: [Int!]
  projRating_lt: Int
  projRating_lte: Int
  projRating_not: Int
  projRating_not_in: [Int!]
  rKey: String
  rKey_contains: String
  rKey_ends_with: String
  rKey_gt: String
  rKey_gte: String
  rKey_in: [String!]
  rKey_lt: String
  rKey_lte: String
  rKey_not: String
  rKey_not_contains: String
  rKey_not_ends_with: String
  rKey_not_in: [String!]
  rKey_not_starts_with: String
  rKey_starts_with: String
  text: String
  text_contains: String
  text_ends_with: String
  text_gt: String
  text_gte: String
  text_in: [String!]
  text_lt: String
  text_lte: String
  text_not: String
  text_not_contains: String
  text_not_ends_with: String
  text_not_in: [String!]
  text_not_starts_with: String
  text_starts_with: String
  thumbsDown: Int
  thumbsDown_gt: Int
  thumbsDown_gte: Int
  thumbsDown_in: [Int!]
  thumbsDown_lt: Int
  thumbsDown_lte: Int
  thumbsDown_not: Int
  thumbsDown_not_in: [Int!]
  thumbsUp: Int
  thumbsUp_gt: Int
  thumbsUp_gte: Int
  thumbsUp_in: [Int!]
  thumbsUp_lt: Int
  thumbsUp_lte: Int
  thumbsUp_not: Int
  thumbsUp_not_in: [Int!]
  timestamp: DateTime
  timestamp_gt: DateTime
  timestamp_gte: DateTime
  timestamp_in: [DateTime!]
  timestamp_lt: DateTime
  timestamp_lte: DateTime
  timestamp_not: DateTime
  timestamp_not_in: [DateTime!]
}

input ReviewUpdateInput {
  Author: UserUpdateOneRequiredWithoutReviewListInput
  DislikedBy: UserUpdateManyWithoutDislikedReviewsInput
  LikedBy: UserUpdateManyWithoutLikedReviewsInput
  name: String
  ProjectReviewed: ProjectUpdateOneRequiredWithoutReviewsInput
  projRating: Int
  rKey: String
  text: String
  thumbsDown: Int
  thumbsUp: Int
  timestamp: DateTime
}

input ReviewUpdateManyDataInput {
  name: String
  projRating: Int
  rKey: String
  text: String
  thumbsDown: Int
  thumbsUp: Int
  timestamp: DateTime
}

input ReviewUpdateManyMutationInput {
  name: String
  projRating: Int
  rKey: String
  text: String
  thumbsDown: Int
  thumbsUp: Int
  timestamp: DateTime
}

input ReviewUpdateManyWithoutAuthorInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutAuthorInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ReviewUpdateManyWithoutDislikedByInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutDislikedByInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutDislikedByInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutDislikedByInput!]
}

input ReviewUpdateManyWithoutLikedByInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutLikedByInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutLikedByInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutLikedByInput!]
}

input ReviewUpdateManyWithoutProjectReviewedInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutProjectReviewedInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutProjectReviewedInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutProjectReviewedInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  data: ReviewUpdateManyDataInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateWithoutAuthorDataInput {
  DislikedBy: UserUpdateManyWithoutDislikedReviewsInput
  LikedBy: UserUpdateManyWithoutLikedReviewsInput
  name: String
  ProjectReviewed: ProjectUpdateOneRequiredWithoutReviewsInput
  projRating: Int
  rKey: String
  text: String
  thumbsDown: Int
  thumbsUp: Int
  timestamp: DateTime
}

input ReviewUpdateWithoutDislikedByDataInput {
  Author: UserUpdateOneRequiredWithoutReviewListInput
  LikedBy: UserUpdateManyWithoutLikedReviewsInput
  name: String
  ProjectReviewed: ProjectUpdateOneRequiredWithoutReviewsInput
  projRating: Int
  rKey: String
  text: String
  thumbsDown: Int
  thumbsUp: Int
  timestamp: DateTime
}

input ReviewUpdateWithoutLikedByDataInput {
  Author: UserUpdateOneRequiredWithoutReviewListInput
  DislikedBy: UserUpdateManyWithoutDislikedReviewsInput
  name: String
  ProjectReviewed: ProjectUpdateOneRequiredWithoutReviewsInput
  projRating: Int
  rKey: String
  text: String
  thumbsDown: Int
  thumbsUp: Int
  timestamp: DateTime
}

input ReviewUpdateWithoutProjectReviewedDataInput {
  Author: UserUpdateOneRequiredWithoutReviewListInput
  DislikedBy: UserUpdateManyWithoutDislikedReviewsInput
  LikedBy: UserUpdateManyWithoutLikedReviewsInput
  name: String
  projRating: Int
  rKey: String
  text: String
  thumbsDown: Int
  thumbsUp: Int
  timestamp: DateTime
}

input ReviewUpdateWithWhereUniqueWithoutAuthorInput {
  data: ReviewUpdateWithoutAuthorDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutDislikedByInput {
  data: ReviewUpdateWithoutDislikedByDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutLikedByInput {
  data: ReviewUpdateWithoutLikedByDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutProjectReviewedInput {
  data: ReviewUpdateWithoutProjectReviewedDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutAuthorInput {
  create: ReviewCreateWithoutAuthorInput!
  update: ReviewUpdateWithoutAuthorDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutDislikedByInput {
  create: ReviewCreateWithoutDislikedByInput!
  update: ReviewUpdateWithoutDislikedByDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutLikedByInput {
  create: ReviewCreateWithoutLikedByInput!
  update: ReviewUpdateWithoutLikedByDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutProjectReviewedInput {
  create: ReviewCreateWithoutProjectReviewedInput!
  update: ReviewUpdateWithoutProjectReviewedDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  Author: UserWhereInput
  DislikedBy_every: UserWhereInput
  DislikedBy_none: UserWhereInput
  DislikedBy_some: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  LikedBy_every: UserWhereInput
  LikedBy_none: UserWhereInput
  LikedBy_some: UserWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  ProjectReviewed: ProjectWhereInput
  projRating: Int
  projRating_gt: Int
  projRating_gte: Int
  projRating_in: [Int!]
  projRating_lt: Int
  projRating_lte: Int
  projRating_not: Int
  projRating_not_in: [Int!]
  rKey: String
  rKey_contains: String
  rKey_ends_with: String
  rKey_gt: String
  rKey_gte: String
  rKey_in: [String!]
  rKey_lt: String
  rKey_lte: String
  rKey_not: String
  rKey_not_contains: String
  rKey_not_ends_with: String
  rKey_not_in: [String!]
  rKey_not_starts_with: String
  rKey_starts_with: String
  text: String
  text_contains: String
  text_ends_with: String
  text_gt: String
  text_gte: String
  text_in: [String!]
  text_lt: String
  text_lte: String
  text_not: String
  text_not_contains: String
  text_not_ends_with: String
  text_not_in: [String!]
  text_not_starts_with: String
  text_starts_with: String
  thumbsDown: Int
  thumbsDown_gt: Int
  thumbsDown_gte: Int
  thumbsDown_in: [Int!]
  thumbsDown_lt: Int
  thumbsDown_lte: Int
  thumbsDown_not: Int
  thumbsDown_not_in: [Int!]
  thumbsUp: Int
  thumbsUp_gt: Int
  thumbsUp_gte: Int
  thumbsUp_in: [Int!]
  thumbsUp_lt: Int
  thumbsUp_lte: Int
  thumbsUp_not: Int
  thumbsUp_not_in: [Int!]
  timestamp: DateTime
  timestamp_gt: DateTime
  timestamp_gte: DateTime
  timestamp_in: [DateTime!]
  timestamp_lt: DateTime
  timestamp_lte: DateTime
  timestamp_not: DateTime
  timestamp_not_in: [DateTime!]
}

input ReviewWhereUniqueInput {
  id: ID
  rKey: String
}

type User {
  accountType: String!
  bio: String!
  DislikedReviews(after: String, before: String, first: Int, last: Int, orderBy: ReviewOrderByInput, skip: Int, where: ReviewWhereInput): [Review!]
  email: String!
  firebaseUID: String
  id: ID!
  LikedReviews(after: String, before: String, first: Int, last: Int, orderBy: ReviewOrderByInput, skip: Int, where: ReviewWhereInput): [Review!]
  privilege: String!
  Projects(after: String, before: String, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): [Project!]
  RatedProjects(after: String, before: String, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): [Project!]
  ReviewList(after: String, before: String, first: Int, last: Int, orderBy: ReviewOrderByInput, skip: Int, where: ReviewWhereInput): [Review!]
  stripeId: String
  thirdPartyUID: String
  username: String!
  userProfileImage: String!
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  accountType: String
  bio: String
  DislikedReviews: ReviewCreateManyWithoutDislikedByInput
  email: String!
  firebaseUID: String
  LikedReviews: ReviewCreateManyWithoutLikedByInput
  privilege: String
  Projects: ProjectCreateManyWithoutUserInput
  RatedProjects: ProjectCreateManyWithoutRatedByInput
  ReviewList: ReviewCreateManyWithoutAuthorInput
  stripeId: String
  thirdPartyUID: String
  username: String!
  userProfileImage: String
}

input UserCreateManyWithoutDislikedReviewsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutDislikedReviewsInput!]
}

input UserCreateManyWithoutLikedReviewsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutLikedReviewsInput!]
}

input UserCreateManyWithoutRatedProjectsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutRatedProjectsInput!]
}

input UserCreateOneWithoutProjectsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProjectsInput
}

input UserCreateOneWithoutReviewListInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReviewListInput
}

input UserCreateWithoutDislikedReviewsInput {
  accountType: String
  bio: String
  email: String!
  firebaseUID: String
  LikedReviews: ReviewCreateManyWithoutLikedByInput
  privilege: String
  Projects: ProjectCreateManyWithoutUserInput
  RatedProjects: ProjectCreateManyWithoutRatedByInput
  ReviewList: ReviewCreateManyWithoutAuthorInput
  stripeId: String
  thirdPartyUID: String
  username: String!
  userProfileImage: String
}

input UserCreateWithoutLikedReviewsInput {
  accountType: String
  bio: String
  DislikedReviews: ReviewCreateManyWithoutDislikedByInput
  email: String!
  firebaseUID: String
  privilege: String
  Projects: ProjectCreateManyWithoutUserInput
  RatedProjects: ProjectCreateManyWithoutRatedByInput
  ReviewList: ReviewCreateManyWithoutAuthorInput
  stripeId: String
  thirdPartyUID: String
  username: String!
  userProfileImage: String
}

input UserCreateWithoutProjectsInput {
  accountType: String
  bio: String
  DislikedReviews: ReviewCreateManyWithoutDislikedByInput
  email: String!
  firebaseUID: String
  LikedReviews: ReviewCreateManyWithoutLikedByInput
  privilege: String
  RatedProjects: ProjectCreateManyWithoutRatedByInput
  ReviewList: ReviewCreateManyWithoutAuthorInput
  stripeId: String
  thirdPartyUID: String
  username: String!
  userProfileImage: String
}

input UserCreateWithoutRatedProjectsInput {
  accountType: String
  bio: String
  DislikedReviews: ReviewCreateManyWithoutDislikedByInput
  email: String!
  firebaseUID: String
  LikedReviews: ReviewCreateManyWithoutLikedByInput
  privilege: String
  Projects: ProjectCreateManyWithoutUserInput
  ReviewList: ReviewCreateManyWithoutAuthorInput
  stripeId: String
  thirdPartyUID: String
  username: String!
  userProfileImage: String
}

input UserCreateWithoutReviewListInput {
  accountType: String
  bio: String
  DislikedReviews: ReviewCreateManyWithoutDislikedByInput
  email: String!
  firebaseUID: String
  LikedReviews: ReviewCreateManyWithoutLikedByInput
  privilege: String
  Projects: ProjectCreateManyWithoutUserInput
  RatedProjects: ProjectCreateManyWithoutRatedByInput
  stripeId: String
  thirdPartyUID: String
  username: String!
  userProfileImage: String
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  accountType_ASC
  accountType_DESC
  bio_ASC
  bio_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  firebaseUID_ASC
  firebaseUID_DESC
  id_ASC
  id_DESC
  privilege_ASC
  privilege_DESC
  stripeId_ASC
  stripeId_DESC
  thirdPartyUID_ASC
  thirdPartyUID_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
  userProfileImage_ASC
  userProfileImage_DESC
}

input UserScalarWhereInput {
  accountType: String
  accountType_contains: String
  accountType_ends_with: String
  accountType_gt: String
  accountType_gte: String
  accountType_in: [String!]
  accountType_lt: String
  accountType_lte: String
  accountType_not: String
  accountType_not_contains: String
  accountType_not_ends_with: String
  accountType_not_in: [String!]
  accountType_not_starts_with: String
  accountType_starts_with: String
  AND: [UserScalarWhereInput!]
  bio: String
  bio_contains: String
  bio_ends_with: String
  bio_gt: String
  bio_gte: String
  bio_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_not: String
  bio_not_contains: String
  bio_not_ends_with: String
  bio_not_in: [String!]
  bio_not_starts_with: String
  bio_starts_with: String
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  firebaseUID: String
  firebaseUID_contains: String
  firebaseUID_ends_with: String
  firebaseUID_gt: String
  firebaseUID_gte: String
  firebaseUID_in: [String!]
  firebaseUID_lt: String
  firebaseUID_lte: String
  firebaseUID_not: String
  firebaseUID_not_contains: String
  firebaseUID_not_ends_with: String
  firebaseUID_not_in: [String!]
  firebaseUID_not_starts_with: String
  firebaseUID_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  privilege: String
  privilege_contains: String
  privilege_ends_with: String
  privilege_gt: String
  privilege_gte: String
  privilege_in: [String!]
  privilege_lt: String
  privilege_lte: String
  privilege_not: String
  privilege_not_contains: String
  privilege_not_ends_with: String
  privilege_not_in: [String!]
  privilege_not_starts_with: String
  privilege_starts_with: String
  stripeId: String
  stripeId_contains: String
  stripeId_ends_with: String
  stripeId_gt: String
  stripeId_gte: String
  stripeId_in: [String!]
  stripeId_lt: String
  stripeId_lte: String
  stripeId_not: String
  stripeId_not_contains: String
  stripeId_not_ends_with: String
  stripeId_not_in: [String!]
  stripeId_not_starts_with: String
  stripeId_starts_with: String
  thirdPartyUID: String
  thirdPartyUID_contains: String
  thirdPartyUID_ends_with: String
  thirdPartyUID_gt: String
  thirdPartyUID_gte: String
  thirdPartyUID_in: [String!]
  thirdPartyUID_lt: String
  thirdPartyUID_lte: String
  thirdPartyUID_not: String
  thirdPartyUID_not_contains: String
  thirdPartyUID_not_ends_with: String
  thirdPartyUID_not_in: [String!]
  thirdPartyUID_not_starts_with: String
  thirdPartyUID_starts_with: String
  username: String
  username_contains: String
  username_ends_with: String
  username_gt: String
  username_gte: String
  username_in: [String!]
  username_lt: String
  username_lte: String
  username_not: String
  username_not_contains: String
  username_not_ends_with: String
  username_not_in: [String!]
  username_not_starts_with: String
  username_starts_with: String
  userProfileImage: String
  userProfileImage_contains: String
  userProfileImage_ends_with: String
  userProfileImage_gt: String
  userProfileImage_gte: String
  userProfileImage_in: [String!]
  userProfileImage_lt: String
  userProfileImage_lte: String
  userProfileImage_not: String
  userProfileImage_not_contains: String
  userProfileImage_not_ends_with: String
  userProfileImage_not_in: [String!]
  userProfileImage_not_starts_with: String
  userProfileImage_starts_with: String
}

input UserUpdateInput {
  accountType: String
  bio: String
  DislikedReviews: ReviewUpdateManyWithoutDislikedByInput
  email: String
  firebaseUID: String
  LikedReviews: ReviewUpdateManyWithoutLikedByInput
  privilege: String
  Projects: ProjectUpdateManyWithoutUserInput
  RatedProjects: ProjectUpdateManyWithoutRatedByInput
  ReviewList: ReviewUpdateManyWithoutAuthorInput
  stripeId: String
  thirdPartyUID: String
  username: String
  userProfileImage: String
}

input UserUpdateManyDataInput {
  accountType: String
  bio: String
  email: String
  firebaseUID: String
  privilege: String
  stripeId: String
  thirdPartyUID: String
  username: String
  userProfileImage: String
}

input UserUpdateManyMutationInput {
  accountType: String
  bio: String
  email: String
  firebaseUID: String
  privilege: String
  stripeId: String
  thirdPartyUID: String
  username: String
  userProfileImage: String
}

input UserUpdateManyWithoutDislikedReviewsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutDislikedReviewsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutDislikedReviewsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutDislikedReviewsInput!]
}

input UserUpdateManyWithoutLikedReviewsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutLikedReviewsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutLikedReviewsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutLikedReviewsInput!]
}

input UserUpdateManyWithoutRatedProjectsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutRatedProjectsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRatedProjectsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRatedProjectsInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutProjectsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProjectsInput
  update: UserUpdateWithoutProjectsDataInput
  upsert: UserUpsertWithoutProjectsInput
}

input UserUpdateOneRequiredWithoutReviewListInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReviewListInput
  update: UserUpdateWithoutReviewListDataInput
  upsert: UserUpsertWithoutReviewListInput
}

input UserUpdateWithoutDislikedReviewsDataInput {
  accountType: String
  bio: String
  email: String
  firebaseUID: String
  LikedReviews: ReviewUpdateManyWithoutLikedByInput
  privilege: String
  Projects: ProjectUpdateManyWithoutUserInput
  RatedProjects: ProjectUpdateManyWithoutRatedByInput
  ReviewList: ReviewUpdateManyWithoutAuthorInput
  stripeId: String
  thirdPartyUID: String
  username: String
  userProfileImage: String
}

input UserUpdateWithoutLikedReviewsDataInput {
  accountType: String
  bio: String
  DislikedReviews: ReviewUpdateManyWithoutDislikedByInput
  email: String
  firebaseUID: String
  privilege: String
  Projects: ProjectUpdateManyWithoutUserInput
  RatedProjects: ProjectUpdateManyWithoutRatedByInput
  ReviewList: ReviewUpdateManyWithoutAuthorInput
  stripeId: String
  thirdPartyUID: String
  username: String
  userProfileImage: String
}

input UserUpdateWithoutProjectsDataInput {
  accountType: String
  bio: String
  DislikedReviews: ReviewUpdateManyWithoutDislikedByInput
  email: String
  firebaseUID: String
  LikedReviews: ReviewUpdateManyWithoutLikedByInput
  privilege: String
  RatedProjects: ProjectUpdateManyWithoutRatedByInput
  ReviewList: ReviewUpdateManyWithoutAuthorInput
  stripeId: String
  thirdPartyUID: String
  username: String
  userProfileImage: String
}

input UserUpdateWithoutRatedProjectsDataInput {
  accountType: String
  bio: String
  DislikedReviews: ReviewUpdateManyWithoutDislikedByInput
  email: String
  firebaseUID: String
  LikedReviews: ReviewUpdateManyWithoutLikedByInput
  privilege: String
  Projects: ProjectUpdateManyWithoutUserInput
  ReviewList: ReviewUpdateManyWithoutAuthorInput
  stripeId: String
  thirdPartyUID: String
  username: String
  userProfileImage: String
}

input UserUpdateWithoutReviewListDataInput {
  accountType: String
  bio: String
  DislikedReviews: ReviewUpdateManyWithoutDislikedByInput
  email: String
  firebaseUID: String
  LikedReviews: ReviewUpdateManyWithoutLikedByInput
  privilege: String
  Projects: ProjectUpdateManyWithoutUserInput
  RatedProjects: ProjectUpdateManyWithoutRatedByInput
  stripeId: String
  thirdPartyUID: String
  username: String
  userProfileImage: String
}

input UserUpdateWithWhereUniqueWithoutDislikedReviewsInput {
  data: UserUpdateWithoutDislikedReviewsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutLikedReviewsInput {
  data: UserUpdateWithoutLikedReviewsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutRatedProjectsInput {
  data: UserUpdateWithoutRatedProjectsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput!
  update: UserUpdateWithoutProjectsDataInput!
}

input UserUpsertWithoutReviewListInput {
  create: UserCreateWithoutReviewListInput!
  update: UserUpdateWithoutReviewListDataInput!
}

input UserUpsertWithWhereUniqueWithoutDislikedReviewsInput {
  create: UserCreateWithoutDislikedReviewsInput!
  update: UserUpdateWithoutDislikedReviewsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutLikedReviewsInput {
  create: UserCreateWithoutLikedReviewsInput!
  update: UserUpdateWithoutLikedReviewsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutRatedProjectsInput {
  create: UserCreateWithoutRatedProjectsInput!
  update: UserUpdateWithoutRatedProjectsDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  accountType: String
  accountType_contains: String
  accountType_ends_with: String
  accountType_gt: String
  accountType_gte: String
  accountType_in: [String!]
  accountType_lt: String
  accountType_lte: String
  accountType_not: String
  accountType_not_contains: String
  accountType_not_ends_with: String
  accountType_not_in: [String!]
  accountType_not_starts_with: String
  accountType_starts_with: String
  AND: [UserWhereInput!]
  bio: String
  bio_contains: String
  bio_ends_with: String
  bio_gt: String
  bio_gte: String
  bio_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_not: String
  bio_not_contains: String
  bio_not_ends_with: String
  bio_not_in: [String!]
  bio_not_starts_with: String
  bio_starts_with: String
  DislikedReviews_every: ReviewWhereInput
  DislikedReviews_none: ReviewWhereInput
  DislikedReviews_some: ReviewWhereInput
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  firebaseUID: String
  firebaseUID_contains: String
  firebaseUID_ends_with: String
  firebaseUID_gt: String
  firebaseUID_gte: String
  firebaseUID_in: [String!]
  firebaseUID_lt: String
  firebaseUID_lte: String
  firebaseUID_not: String
  firebaseUID_not_contains: String
  firebaseUID_not_ends_with: String
  firebaseUID_not_in: [String!]
  firebaseUID_not_starts_with: String
  firebaseUID_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  LikedReviews_every: ReviewWhereInput
  LikedReviews_none: ReviewWhereInput
  LikedReviews_some: ReviewWhereInput
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  privilege: String
  privilege_contains: String
  privilege_ends_with: String
  privilege_gt: String
  privilege_gte: String
  privilege_in: [String!]
  privilege_lt: String
  privilege_lte: String
  privilege_not: String
  privilege_not_contains: String
  privilege_not_ends_with: String
  privilege_not_in: [String!]
  privilege_not_starts_with: String
  privilege_starts_with: String
  Projects_every: ProjectWhereInput
  Projects_none: ProjectWhereInput
  Projects_some: ProjectWhereInput
  RatedProjects_every: ProjectWhereInput
  RatedProjects_none: ProjectWhereInput
  RatedProjects_some: ProjectWhereInput
  ReviewList_every: ReviewWhereInput
  ReviewList_none: ReviewWhereInput
  ReviewList_some: ReviewWhereInput
  stripeId: String
  stripeId_contains: String
  stripeId_ends_with: String
  stripeId_gt: String
  stripeId_gte: String
  stripeId_in: [String!]
  stripeId_lt: String
  stripeId_lte: String
  stripeId_not: String
  stripeId_not_contains: String
  stripeId_not_ends_with: String
  stripeId_not_in: [String!]
  stripeId_not_starts_with: String
  stripeId_starts_with: String
  thirdPartyUID: String
  thirdPartyUID_contains: String
  thirdPartyUID_ends_with: String
  thirdPartyUID_gt: String
  thirdPartyUID_gte: String
  thirdPartyUID_in: [String!]
  thirdPartyUID_lt: String
  thirdPartyUID_lte: String
  thirdPartyUID_not: String
  thirdPartyUID_not_contains: String
  thirdPartyUID_not_ends_with: String
  thirdPartyUID_not_in: [String!]
  thirdPartyUID_not_starts_with: String
  thirdPartyUID_starts_with: String
  username: String
  username_contains: String
  username_ends_with: String
  username_gt: String
  username_gte: String
  username_in: [String!]
  username_lt: String
  username_lte: String
  username_not: String
  username_not_contains: String
  username_not_ends_with: String
  username_not_in: [String!]
  username_not_starts_with: String
  username_starts_with: String
  userProfileImage: String
  userProfileImage_contains: String
  userProfileImage_ends_with: String
  userProfileImage_gt: String
  userProfileImage_gte: String
  userProfileImage_in: [String!]
  userProfileImage_lt: String
  userProfileImage_lte: String
  userProfileImage_not: String
  userProfileImage_not_contains: String
  userProfileImage_not_ends_with: String
  userProfileImage_not_in: [String!]
  userProfileImage_not_starts_with: String
  userProfileImage_starts_with: String
}

input UserWhereUniqueInput {
  email: String
  firebaseUID: String
  id: ID
  thirdPartyUID: String
  username: String
}
